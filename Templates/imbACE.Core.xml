<?xml version="1.0"?>
<doc>
    <assembly>
        <name>imbACE.Core</name>
    </assembly>
    <members>
        <member name="T:imbACE.Core.application.aceApplicationInfo">
            <summary>
            Information about application that is immutable - defined at Design Time
            </summary>
            <seealso cref="T:imbSCI.Core.data.aceAuthorNotation" />
        </member>
        <member name="P:imbACE.Core.application.aceApplicationInfo.welcomeMessage">
            <summary>
            Message to be shown at startup
            </summary>
            <value>
            The welcome message.
            </value>
        </member>
        <member name="P:imbACE.Core.application.aceApplicationInfo.applicationName">
            <summary>
            naziv aplikacije
            </summary>
        </member>
        <member name="P:imbACE.Core.application.aceApplicationInfo.applicationVersion">
            <summary>
            verzija aplikacije
            </summary>
        </member>
        <member name="T:imbACE.Core.application.aceApplicationSettings">
            <summary>
            Base class for application settings
            </summary>
            <seealso cref="T:imbACE.Core.core.aceSettingsStandaloneBase" />
        </member>
        <member name="P:imbACE.Core.application.aceApplicationSettings.aceCoreConfig">
            <summary>
            Gets or sets the ace core configuration.
            </summary>
            <value>
            The ace core configuration.
            </value>
        </member>
        <member name="P:imbACE.Core.application.aceApplicationSettings.sciCoreConfig">
            <summary>
            Gets or sets the sci core configuration.
            </summary>
            <value>
            The sci core configuration.
            </value>
        </member>
        <member name="P:imbACE.Core.application.aceApplicationSettings.sciReportingConfing">
            <summary>
            Gets or sets the sci reporting confing.
            </summary>
            <value>
            The sci reporting confing.
            </value>
        </member>
        <member name="P:imbACE.Core.application.aceApplicationSettings.doLoopExternalDelay">
            <summary>Main thread loop delay in ms</summary>
        </member>
        <member name="P:imbACE.Core.application.aceApplicationSettings.Culture">
            <summary> Culture code </summary>
        </member>
        <member name="P:imbACE.Core.application.aceApplicationSettings.doAskOnApplicationExit">
            <summary> If true it will ask for confirmation on application exit </summary>
        </member>
        <member name="P:imbACE.Core.application.aceApplicationSettings.CachePathOverride">
            <summary>  </summary>
        </member>
        <member name="P:imbACE.Core.application.aceApplicationSettings.RunAtamanOnStartUp">
            <summary> If true it will run Ataman check on directories with auto-generated data on application start-up </summary>
        </member>
        <member name="P:imbACE.Core.application.aceApplicationSettings.LoadPluginsOnStartUp">
            <summary> If true it will search and load external plugins during start-up </summary>
        </member>
        <member name="P:imbACE.Core.application.aceApplicationSettings.RegenerateReadMeFiles">
            <summary> If <c>true</c> it will regenerate application folder's read-me files </summary>
        </member>
        <member name="T:imbACE.Core.application.aceApplicationState">
            <summary>
            Basic information on application state
            </summary>
            <seealso cref="T:imbSCI.Data.data.imbBindable" />
        </member>
        <member name="P:imbACE.Core.application.aceApplicationState.isRunning">
            <summary> If true it will keep the process running </summary>
        </member>
        <member name="T:imbACE.Core.application.IAceApplicationBase">
            <summary>
            Interface to the foundation of AceApplication
            </summary>
            <seealso cref="T:imbSCI.Data.interfaces.IObjectWithName" />
        </member>
        <member name="P:imbACE.Core.application.IAceApplicationBase.logger">
            <summary>
            Main log-output for the application
            </summary>
            <value>
            The logger.
            </value>
        </member>
        <member name="P:imbACE.Core.application.IAceApplicationBase.name">
            <summary>
            Name of the application
            </summary>
            <value>
            The name.
            </value>
        </member>
        <member name="P:imbACE.Core.application.IAceApplicationBase.description">
            <summary>
            Short description of the application
            </summary>
            <value>
            The description.
            </value>
        </member>
        <member name="P:imbACE.Core.application.IAceApplicationBase.folder">
            <summary>
            Main application folder, where the executable is started
            </summary>
            <value>
            The folder.
            </value>
        </member>
        <member name="P:imbACE.Core.application.IAceApplicationBase.folder_plugins">
            <summary>
            Folder with plugins
            </summary>
        </member>
        <member name="P:imbACE.Core.application.IAceApplicationBase.folder_reports">
            <summary>
            Folder with plugins
            </summary>
            <value>
            The folder reports.
            </value>
        </member>
        <member name="P:imbACE.Core.application.IAceApplicationBase.folder_resources">
            <summary>
            Folder with report themes and other resources
            </summary>
            <value>
            The folder resources.
            </value>
        </member>
        <member name="P:imbACE.Core.application.IAceApplicationBase.folder_config">
            <summary>
            Folder with configuration files
            </summary>
            <value>
            The folder configuration.
            </value>
        </member>
        <member name="P:imbACE.Core.application.IAceApplicationBase.folder_cache">
            <summary>
            Folder used by the chache system
            </summary>
            <value>
            The folder cache.
            </value>
        </member>
        <member name="P:imbACE.Core.application.IAceApplicationBase.folder_projects">
            <summary>
            Folder with saved application projects.
            </summary>
            <value>
            The folder projects.
            </value>
        </member>
        <member name="P:imbACE.Core.application.IAceApplicationBase.folder_logs">
            <summary>
            Folder with log files and diagnostics
            </summary>
            <value>
            The folder logs.
            </value>
        </member>
        <member name="P:imbACE.Core.application.IAceApplicationBase.ataman">
            <summary>
            Ataman - watching logs and other folders for oversize
            </summary>
            <value>
            The ataman.
            </value>
        </member>
        <member name="P:imbACE.Core.application.IAceApplicationBase.plugins">
            <summary>
            Plugins from <see cref="P:imbACE.Core.application.IAceApplicationBase.folder_plugins"/> folder
            </summary>
            <value>
            The plugins.
            </value>
        </member>
        <member name="P:imbACE.Core.application.IAceApplicationBase.settings">
            <summary>
            Base application settings
            </summary>
            <value>
            The settings.
            </value>
        </member>
        <member name="E:imbACE.Core.application.IAceApplicationBase.onEventApplicationLoaded">
            <summary>Event handler for <see cref="F:imbACE.Core.events.aceEventType.Loaded"/>" at <see cref="F:imbACE.Core.events.aceEventOrigin.Application"/>, to hook reaction method on to. </summary>;
        </member>
        <member name="E:imbACE.Core.application.IAceApplicationBase.onEventApplicationReady">
            <summary>Event handler for <see cref="F:imbACE.Core.events.aceEventType.Ready"/>" at <see cref="F:imbACE.Core.events.aceEventOrigin.Application"/>, to hook reaction method on to. </summary>;
        </member>
        <member name="E:imbACE.Core.application.IAceApplicationBase.onEventApplicationClosing">
            <summary>Event handler for <see cref="F:imbACE.Core.events.aceEventType.Closing"/>" at <see cref="F:imbACE.Core.events.aceEventOrigin.Application"/>, to hook reaction method on to. </summary>;
        </member>
        <member name="T:imbACE.Core.appManager">
            <summary>
            Static reference to the application instance
            </summary>
        </member>
        <member name="P:imbACE.Core.appManager.IsReady">
            <summary>
            Gets a value indicating whether this instance is ready.
            </summary>
            <value>
              <c>true</c> if this instance is ready; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:imbACE.Core.appManager.AppInfo">
            <summary>
            Gets the application information.
            </summary>
            <value>
            The application information.
            </value>
        </member>
        <member name="P:imbACE.Core.appManager.AppSettings">
            <summary>
            Gets the application settings.
            </summary>
            <value>
            The application settings.
            </value>
        </member>
        <member name="F:imbACE.Core.ataman.fileWatch.fileWatcherEventMode.disabled">
            <summary>
            Operation is temporarly or definitly turned off
            </summary>
        </member>
        <member name="F:imbACE.Core.ataman.fileWatch.fileWatcherEventMode.directEventCall">
            <summary>
            Pokrece onFileWatcherEvent odmah nakon prijema fileSystemWatcher eventa - 1 on 1 rad, events lista stoji tu samo radi 
            </summary>
        </member>
        <member name="F:imbACE.Core.ataman.fileWatch.fileWatcherEventMode.externalEventListFlush">
            <summary>
            Pakuje evente u listu - ručno se pokreće flush procedura
            </summary>
        </member>
        <member name="F:imbACE.Core.ataman.fileWatch.fileWatcherEventMode.handlerFlush_internalTimer">
            <summary>
            onFileWatcherEvent se poziva na osnovu provere koju vrsi interni tajmer
            </summary>
        </member>
        <member name="F:imbACE.Core.ataman.fileWatch.fileWatcherEventMode.handlerFlush_externalTimer">
            <summary>
            Rucno se poziva provera uslova za pozivanje onFileWatcherEvent-a
            </summary>
        </member>
        <member name="T:imbACE.Core.ataman.fileWatch.fileWatcher">
            <summary>
            File watcher is a continuous type of ataman watcher, it collects file system events (according to specified rules) and reports them trough <see cref="M:imbACE.Core.ataman.fileWatch.fileWatcher.eventFlush"/> call
            </summary>
        </member>
        <member name="M:imbACE.Core.ataman.fileWatch.fileWatcher.#ctor(imbACE.Core.ataman.fileWatch.fileWatcherType,System.String,System.String)">
            <summary>
            Creates a file watcher instance
            </summary>
            <param name="path"></param>
            <param name="searchFilter"></param>
            <returns></returns>
        </member>
        <member name="M:imbACE.Core.ataman.fileWatch.fileWatcher.start(imbACE.Core.ataman.fileWatch.fileWatcherEventMode,imbACE.Core.ataman.fileWatch.fileWatcherEvent)">
            <summary>
            (re)starts fileWatcher operation reseting state according to __eventMode
            </summary>
            <param name="__eventMode">fileWatcher event flushing mode to operate on</param>
            <param name="__onFileWatcherEvent">Event handler that should be called for flushing</param>
        </member>
        <member name="M:imbACE.Core.ataman.fileWatch.fileWatcher.stop">
            <summary>
            Stops fileWatcher operation - may be used for temporaral or definite purposes
            </summary>
        </member>
        <member name="M:imbACE.Core.ataman.fileWatch.fileWatcher.run">
            <summary>
            Continues fileWatcher operation from current state, using current settings
            </summary>
        </member>
        <member name="M:imbACE.Core.ataman.fileWatch.fileWatcher.externalTimerTick(System.Object)">
            <summary>
            Okida eksterni tajmer
            </summary>
            <param name="state"></param>
        </member>
        <member name="M:imbACE.Core.ataman.fileWatch.fileWatcher.externalEventsFlush(System.Object)">
            <summary>
            Izvrsava preuzimanje nakupljenih eventova - samo za mode  fileWatcherEventMode.externalEventListFlush
            </summary>
            <param name="state"></param>
            <returns></returns>
        </member>
        <member name="P:imbACE.Core.ataman.fileWatch.fileWatcher.events">
            <summary>
            lista dogadjaja
            </summary>
        </member>
        <member name="F:imbACE.Core.ataman.fileWatch.fileWatcher.isOperationDisabled">
            <summary>
            Kada je zaustavljen onda je ovde true
            </summary>
        </member>
        <member name="F:imbACE.Core.ataman.fileWatch.fileWatcher.eventMode">
            <summary>
            fileWatcher mode of operation
            </summary>
        </member>
        <member name="P:imbACE.Core.ataman.fileWatch.fileWatcher.path">
            <summary>
            putanja koju posmatra
            </summary>
        </member>
        <member name="F:imbACE.Core.ataman.fileWatch.fileWatcher._searchFilter">
            <summary>
            Search filter for Folder monitoring
            </summary>
        </member>
        <member name="P:imbACE.Core.ataman.fileWatch.fileWatcher.searchFilter">
            <summary>
            Search filter for Folder monitoring
            </summary>
        </member>
        <member name="M:imbACE.Core.ataman.fileWatch.fileWatcher._fileSystemWatcher_newEvent(System.Object,System.IO.FileSystemEventArgs)">
            <summary>
            Processing .NET API fileSystemWatcher event
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:imbACE.Core.ataman.fileWatch.fileWatcher.timerCheck(System.Object)">
            <summary>
            Izvrsava kada je tajmer (interni ili externi) dostigao potrebnu vrednost
            </summary>
            <param name="state"></param>
        </member>
        <member name="M:imbACE.Core.ataman.fileWatch.fileWatcher.timerTick(System.Object)">
            <summary>
            Izvrsava kada je tajmer (interni ili externi) dostigao potrebnu vrednost
            </summary>
            <param name="state"></param>
        </member>
        <member name="M:imbACE.Core.ataman.fileWatch.fileWatcher.eventFlush">
            <summary>
            <para>Returns the event list or triggers the event handlers - but only when the flush time has passed, otherwise returns null and takes no action</para>
            </summary>
            <returns></returns>
        </member>
        <member name="T:imbACE.Core.ataman.fileWatch.fileWatcherEvent">
            <summary>
            Delegat eventa 
            </summary>
            <param name="sender">Objekat koji je izazvao dogadjaj</param>
            <param name="args">Objekat sa argumentima</param>
        </member>
        <member name="T:imbACE.Core.ataman.fileWatch.fileWatcherEventArgs">
            <summary>
            Objekat koji opisuje dogadjaj koji se desio objektu: fileWatcher
            </summary>
        </member>
        <member name="M:imbACE.Core.ataman.fileWatch.fileWatcherEventArgs.processAndDispose">
            <summary>
            Obelezava event ta je obradjen i oslobadja sve resurse
            </summary>
        </member>
        <member name="P:imbACE.Core.ataman.fileWatch.fileWatcherEventArgs.time">
            <summary>
            Vreme kada se desio dogadjaj
            </summary>
        </member>
        <member name="F:imbACE.Core.ataman.fileWatch.fileWatcherEventArgs._uid">
            <summary>
            Unique ID string
            </summary>
        </member>
        <member name="P:imbACE.Core.ataman.fileWatch.fileWatcherEventArgs.uid">
            <summary>
            Unique ID string
            </summary>
        </member>
        <member name="P:imbACE.Core.ataman.fileWatch.fileWatcherEventArgs.message">
            <summary>
            verbal message about the event
            </summary>
        </member>
        <member name="F:imbACE.Core.ataman.fileWatch.fileWatcherEventArgs._filename">
            <summary>
            filename sa ekstenzijom bez putanje
            </summary>
        </member>
        <member name="P:imbACE.Core.ataman.fileWatch.fileWatcherEventArgs.filename">
            <summary>
            filename sa ekstenzijom bez putanje
            </summary>
        </member>
        <member name="P:imbACE.Core.ataman.fileWatch.fileWatcherEventArgs.id">
            <summary>
            Ordinal event id - for file watcher
            </summary>
        </member>
        <member name="P:imbACE.Core.ataman.fileWatch.fileWatcherEventArgs.watcher">
            <summary>
            referenca prema watcher objektu koji je primetio promenu
            </summary>
        </member>
        <member name="P:imbACE.Core.ataman.fileWatch.fileWatcherEventArgs.filesystemArgs">
            <summary>
            izvorni argumenti filesystemwatchera
            </summary>
        </member>
        <member name="P:imbACE.Core.ataman.fileWatch.fileWatcherEventArgs.isFile">
            <summary>
            da li putanja ukazuje na fajl
            </summary>
        </member>
        <member name="P:imbACE.Core.ataman.fileWatch.fileWatcherEventArgs.isProcessed">
            <summary>
            da li je vec obradjen ovaj event - 
            </summary>
        </member>
        <member name="P:imbACE.Core.ataman.fileWatch.fileWatcherEventArgs.changeType">
            <summary>
            Vrsta promene koja je nastala
            </summary>
        </member>
        <member name="P:imbACE.Core.ataman.fileWatch.fileWatcherEventArgs.path">
            <summary>
            Putanja ka fajlu/direktorijumu koji je predmet dogadjaja
            </summary>
        </member>
        <member name="P:imbACE.Core.ataman.fileWatch.fileWatcherEventArgs.type">
            <summary>
            event type - 
            </summary>
        </member>
        <member name="T:imbACE.Core.ataman.fileWatch.fileWatcherEventCollection">
            <summary>
            List of cached events 
            </summary>
        </member>
        <member name="M:imbACE.Core.ataman.fileWatch.fileWatcherEventCollection.getMessages">
            <summary>
            Collects all messages from collection
            </summary>
            <returns></returns>
        </member>
        <member name="F:imbACE.Core.ataman.fileWatch.fileWatcherEventCollection._lastUID">
            <summary>
            last UID added
            </summary>
        </member>
        <member name="P:imbACE.Core.ataman.fileWatch.fileWatcherEventCollection.lastUID">
            <summary>
            last UID added
            </summary>
        </member>
        <member name="F:imbACE.Core.ataman.fileWatch.fileWatcherEventCollection._TheEvent">
            <summary>
            The First or only event in collection
            </summary>
        </member>
        <member name="P:imbACE.Core.ataman.fileWatch.fileWatcherEventCollection.TheEvent">
            <summary>
            The First or only event in collection
            </summary>
        </member>
        <member name="T:imbACE.Core.ataman.fileWatch.fileWatcherEventType">
            <summary>
            Tip dogadjaja - za objekat: fileWatcher
            </summary>
        </member>
        <member name="F:imbACE.Core.ataman.fileWatch.fileWatcherException._watcher">
            <summary>
            watcher instance
            </summary>
        </member>
        <member name="P:imbACE.Core.ataman.fileWatch.fileWatcherException.watcher">
            <summary>
            watcher instance
            </summary>
        </member>
        <member name="T:imbACE.Core.ataman.spaceWatch.atamanSpaceLimiter">
            <summary>
            Checks total harddrive allocation of associated directory and performes auto-cleaning of old files upon the limit is reached
            </summary>
        </member>
        <member name="P:imbACE.Core.ataman.spaceWatch.atamanSpaceLimiter.LimitMB">
            <summary> Number of megabytes allowed for assigned directory to allocate </summary>
        </member>
        <member name="P:imbACE.Core.ataman.spaceWatch.atamanSpaceLimiter.CleaningLimitMB">
            <summary> Number of megabytes to leave undeleted (the newest content) </summary>
        </member>
        <member name="T:imbACE.Core.ataman.aceSystemAtaman">
            <summary>
            Watch-guard class, monitoring file-system in application scope
            </summary>
        </member>
        <member name="F:imbACE.Core.ataman.aceSystemAtaman.doPauseAllFileWatchers">
            <summary>
            Ako je TRUE svi fileWatcher objekti postaju pasivni - odnosno nece generisati event ukoliko dolazi do promene
            </summary>
        </member>
        <member name="F:imbACE.Core.ataman.aceSystemAtaman.defaultEventsFlushInterval">
            <summary>
            U milisekundama koliko zadrzava event listu pre nego sto prijavi event
            </summary>
        </member>
        <member name="M:imbACE.Core.cache.cacheSimpleBase`1.loadObjectCacheOrNew(System.String)">
            <summary>
            Loads the cached instance or creates new object
            </summary>
            <param name="instanceID">The instance identifier.</param>
            <returns></returns>
        </member>
        <member name="M:imbACE.Core.cache.cacheSimpleBase`1.loadObjectCachedValuesToTarget(`0,System.String)">
            <summary>
            Loads the object cached values to target.
            </summary>
            <param name="target">The target.</param>
            <param name="instanceID">The instance identifier.</param>
            <returns></returns>
        </member>
        <member name="M:imbACE.Core.cache.cacheSimpleBase`1.loadObjectCacheAndMeta(System.String,System.Boolean)">
            <summary>
            Loads the object cache and meta returns all meta information
            </summary>
            <param name="instanceID">The instance identifier.</param>
            <param name="createNewIfNotFound">if set to <c>true</c> [create new if not found].</param>
            <returns></returns>
        </member>
        <member name="M:imbACE.Core.cache.cacheSimpleBase`1.saveObjectCache(`0)">
            <summary>
            Saves the object cache.
            </summary>
            <param name="instance">The instance.</param>
            <returns></returns>
            <exception cref="T:System.ArgumentException">saveObjectCache(T instance) failed because automatic instanceID extraction failed - instanceID</exception>
        </member>
        <member name="M:imbACE.Core.cache.cacheSimpleBase`1.saveObjectCache(System.String,`0)">
            <summary>
            Saves the object cache and returns cache file full path
            </summary>
            <param name="instanceID">The instance identifier.</param>
            <param name="instance">The instance.</param>
            <returns></returns>
        </member>
        <member name="T:imbACE.Core.cache.cacheResponseForType`1">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
            <seealso cref="!:imbSCI.Core.core.imbBindable" />
            <seealso cref="!:imbACE.Core.reporting.IAppendDataFields" />
        </member>
        <member name="P:imbACE.Core.cache.cacheResponseForType`1.instanceTyped">
            <summary>
            
            </summary>
        </member>
        <member name="T:imbACE.Core.cache.cacheResponseForType">
            <summary>
            General cache response container
            </summary>
            <typeparam name="T"></typeparam>
            <seealso cref="!:imbSCI.Core.core.imbBindable" />
        </member>
        <member name="M:imbACE.Core.cache.cacheResponseForType.AppendDataFields(imbSCI.Core.collection.PropertyCollectionExtended)">
            <summary>
            Appends its data points into new or existing property collection
            </summary>
            <param name="data">Property collection to add data into</param>
            <returns>Updated or newly created property collection</returns>
        </member>
        <member name="M:imbACE.Core.cache.cacheResponseForType.imbSCI#Core#reporting#IAppendDataFields#AppendDataFields(System.Data.PropertyCollection)">
            <summary>
            Appends its data points into new or existing property collection
            </summary>
            <param name="data">Property collection to add data into</param>
            <returns>
            Updated or newly created property collection
            </returns>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:imbACE.Core.cache.cacheResponseForType.#ctor(System.String,imbSCI.Core.files.folders.folderNode,System.Boolean,System.Type)">
            <summary>
            Initializes a new instance of the 
            </summary>
            <param name="__instanceID">The instance identifier.</param>
            <param name="__directory">The directory.</param>
        </member>
        <member name="P:imbACE.Core.cache.cacheResponseForType.createNewOnNotFound">
            <summary>
            
            </summary>
        </member>
        <member name="P:imbACE.Core.cache.cacheResponseForType.instanceTypeName">
            <summary>
            
            </summary>
        </member>
        <member name="P:imbACE.Core.cache.cacheResponseForType.instanceType">
            <summary>
            
            </summary>
        </member>
        <member name="M:imbACE.Core.cache.cacheResponseForType.getCacheFromHarddisk``1(System.Int32,System.String)">
            <summary>
            Gets the cache from harddisk if the file is younger than <c>limithours</c>, otherwise deletes all
            </summary>
            <param name="limithours">The limithours.</param>
        </member>
        <member name="P:imbACE.Core.cache.cacheResponseForType.cacheAge">
            <summary>
            How old is the cache file
            </summary>
        </member>
        <member name="P:imbACE.Core.cache.cacheResponseForType.directory">
            <summary>
            
            </summary>
        </member>
        <member name="P:imbACE.Core.cache.cacheResponseForType.instance">
            <summary>
            instance to be retrieved
            </summary>
        </member>
        <member name="P:imbACE.Core.cache.cacheResponseForType.filepath">
            <summary>
            
            </summary>
        </member>
        <member name="P:imbACE.Core.cache.cacheResponseForType.cacheInstanceLoaded">
            <summary>
            
            </summary>
        </member>
        <member name="P:imbACE.Core.cache.cacheResponseForType.haveInstance">
            <summary>
            if the cache was loaded
            </summary>
        </member>
        <member name="P:imbACE.Core.cache.cacheResponseForType.cacheFileExists">
            <summary>
            if the cache file exists
            </summary>
        </member>
        <member name="P:imbACE.Core.cache.cacheResponseForType.instanceID">
            <summary>
            
            </summary>
        </member>
        <member name="P:imbACE.Core.cache.cacheSimpleBase.log">
             <summary>
            
             </summary>
        </member>
        <member name="P:imbACE.Core.cache.cacheSimpleBase.typeInfo">
            <summary>
            
            </summary>
        </member>
        <member name="P:imbACE.Core.cache.cacheSimpleBase.cacheSaveDisabled">
            <summary>
            
            </summary>
        </member>
        <member name="P:imbACE.Core.cache.cacheSimpleBase.cacheLoadDisabled">
            <summary>
            
            </summary>
        </member>
        <member name="M:imbACE.Core.cache.cacheSimpleBase.removeCacheAll">
            <summary>
            Removes all cache files within directory, returns number of files removed
            </summary>
            <returns></returns>
        </member>
        <member name="M:imbACE.Core.cache.cacheSimpleBase.removeCache(System.String)">
            <summary>
            Removes the cache for instance - if exists. TRUE if cache file existed
            </summary>
            <param name="instanceID">The instance identifier.</param>
            <returns></returns>
        </member>
        <member name="P:imbACE.Core.cache.cacheSimpleBase.hourslimit">
            <summary>
            
            </summary>
        </member>
        <member name="P:imbACE.Core.cache.cacheSimpleBase.directory">
            <summary>
            
            </summary>
        </member>
        <member name="P:imbACE.Core.cache.cacheSimpleBase.customSubdirectory">
            <summary>
            
            </summary>
        </member>
        <member name="M:imbACE.Core.cache.cacheSimpleBase.AppendDataFields(imbSCI.Core.collection.PropertyCollectionExtended)">
            <summary>
            Appends its data points into new or existing property collection
            </summary>
            <param name="data">Property collection to add data into</param>
            <returns>Updated or newly created property collection</returns>
        </member>
        <member name="M:imbACE.Core.cache.cacheSimpleBase.imbSCI#Core#reporting#IAppendDataFields#AppendDataFields(System.Data.PropertyCollection)">
            <summary>
            Appends its data points into new or existing property collection
            </summary>
            <param name="data">Property collection to add data into</param>
            <returns>
            Updated or newly created property collection
            </returns>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="T:imbACE.Core.cache.cacheSystem">
            <summary>
            
            </summary>
        </member>
        <member name="M:imbACE.Core.cache.cacheSystem.cacheAgeLimit">
            <summary>
            Caches the age limit.
            </summary>
            <returns></returns>
        </member>
        <member name="M:imbACE.Core.cache.cacheSystem.removeCacheAll(imbSCI.Core.files.folders.folderNode,System.String)">
            <summary>
            Removes cache from specified directory
            </summary>
            <param name="directory">The directory.</param>
            <param name="customSubDirectory">The custom sub directory.</param>
            <returns></returns>
        </member>
        <member name="M:imbACE.Core.cache.cacheSystem.removeCache(System.String,imbSCI.Core.files.folders.folderNode,System.String)">
            <summary>
            Removes chache file for <c>instanceID</c>, returns <c>TRUE</c> if file existed, <c>FALSE</c> if file never existed
            </summary>
            <param name="instanceID">The instance identifier.</param>
            <param name="directory">The directory.</param>
            <returns></returns>
        </member>
        <member name="M:imbACE.Core.cache.cacheSystem.saveObjectCache(System.String,System.Object,imbSCI.Core.files.folders.folderNode,System.String)">
            <summary>
            Saves the cache.
            </summary>
            <param name="instanceID">The instance identifier.</param>
            <param name="source">The source.</param>
            <param name="directory">The directory.</param>
        </member>
        <member name="M:imbACE.Core.cache.cacheSystem.loadObjectCache``1(System.String,System.Int32,imbSCI.Core.files.folders.folderNode)">
            <summary>
            Loads the cache file for the <c>instanceID</c> if file jounger than <c>limithours</c>
            </summary>
            <typeparam name="T"></typeparam>
            <param name="instanceID">The instance identifier.</param>
            <param name="limithours">The limithours.</param>
            <param name="directory">The directory.</param>
            <returns></returns>
        </member>
        <member name="M:imbACE.Core.cache.cacheSystem.getCacheFilepath(System.String,imbSCI.Core.files.folders.folderNode,System.String)">
            <summary>
            Gets the full filepath via MD5 algorithm based on instanceID
            </summary>
            <param name="instanceID">The instance identifier.</param>
            <param name="directory">The directory.</param>
            <returns></returns>
        </member>
        <member name="M:imbACE.Core.cache.ICacheEnabled.saveCache">
            <summary>
            Saves the cache.
            </summary>
            <returns></returns>
        </member>
        <member name="M:imbACE.Core.cache.ICacheEnabled.loadCache(System.String)">
            <summary>
            Loads cache for <c>instanceID</c> into this object
            </summary>
            <param name="instanceID">The instance identifier.</param>
            <returns></returns>
        </member>
        <member name="P:imbACE.Core.cache.ICacheEnabled.cacheInstanceID">
            <summary>
            Gets the cache instance identifier.
            </summary>
            <value>
            The cache instance identifier.
            </value>
        </member>
        <member name="T:imbACE.Core.collection.IAceComplexCollection">
            <summary>
            Kolekcija koja je prosirena dodatnim propertijima
            </summary>
        </member>
        <member name="T:imbACE.Core.commands.aceCommandEvent">
            <summary>
            Delegat eventa 
            </summary>
            <param name="sender">Objekat koji je izazvao dogadjaj</param>
            <param name="args">Objekat sa argumentima</param>
        </member>
        <member name="T:imbACE.Core.commands.aceCommandEventArgs">
            <summary>
            Objekat koji opisuje dogadjaj koji se desio objektu: aceCommand
            </summary>
        </member>
        <member name="P:imbACE.Core.commands.aceCommandEventArgs.parameter">
            <summary>
            proizvoljni parametar poziva komande
            </summary>
        </member>
        <member name="P:imbACE.Core.commands.aceCommandEventArgs.command">
            <summary>
            komanda koja je izazvala dogadjaj
            </summary>
        </member>
        <member name="P:imbACE.Core.commands.aceCommandEventArgs.caller">
            <summary>
            Objekat koji je pozvao komandu
            </summary>
        </member>
        <member name="P:imbACE.Core.commands.aceCommandEventArgs.logableCaller">
            <summary>
            objekat koji je pozvao komandu - a podrzava logovanje
            </summary>
        </member>
        <member name="P:imbACE.Core.commands.aceCommandEventArgs.type">
            <summary>
            tip poziva komande
            </summary>
        </member>
        <member name="T:imbACE.Core.commands.aceCommandEventType">
            <summary>
            Tip dogadjaja - za objekat: aceCommand
            </summary>
        </member>
        <member name="P:imbACE.Core.commands.commandBase.commandShortName">
            <summary>
            character ili kratak string
            </summary>
        </member>
        <member name="P:imbACE.Core.commands.commandBase.commandFullname">
            <summary>
            Dugacak naziv komande - opisnog tipa
            </summary>
        </member>
        <member name="P:imbACE.Core.commands.commandBase.description">
            <summary>
            Opis komande
            </summary>
        </member>
        <member name="P:imbACE.Core.commands.commandExpression.isValidExpression">
            <summary>
            Da li je u pitanju validni komandni izraz
            </summary>
        </member>
        <member name="P:imbACE.Core.commands.commandExpression.parameters">
            <summary>
            redom parametri
            </summary>
        </member>
        <member name="P:imbACE.Core.commands.commandExpression.identifier">
            <summary>
            identificator komande
            </summary>
        </member>
        <member name="P:imbACE.Core.commands.commandExpressionFormat.commandPrefixString">
            <summary>
            String koji ide pre navodjenja komande
            </summary>
        </member>
        <member name="P:imbACE.Core.commands.commandExpressionFormat.commandParameterSpliterRegex">
            <summary>
            Description of $property$
            </summary>
        </member>
        <member name="P:imbACE.Core.commands.commandExpressionFormat.commandParameterSpliter">
            <summary>
            String spliter koji deli parametre
            </summary>
        </member>
        <member name="M:imbACE.Core.commands.commandlineArguments.onHelpCalled(imbACE.Core.commands.IAceCommand,imbACE.Core.commands.aceCommandEventArgs)">
            <summary>
            Izbacuje u log help instrukcije
            </summary>
            <param name="_command"></param>
            <param name="_args"></param>
        </member>
        <member name="T:imbACE.Core.commands.commandLineEntry">
            <summary>
            
            </summary>
        </member>
        <member name="F:imbACE.Core.commands.commandLineEntry.COMMANDFORMAT_Explicit">
            <summary>
            The commandformat explicit: explore word="kontakti";engine=hunspell;log=5;
            </summary>
        </member>
        <member name="F:imbACE.Core.commands.commandLineEntry.COMMANDFORMAT_Implicit">
            <summary>
            The commandformat implicit: explore "kontakti", 510, hunspell 
            </summary>
        </member>
        <member name="P:imbACE.Core.commands.commandLineEntry.commentedOut">
            <summary> </summary>
        </member>
        <member name="P:imbACE.Core.commands.commandLineEntry.isEmptyLine">
            <summary>
            The command line was empty, without any command
            </summary>
            <value>
              <c>true</c> if this instance is empty line; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="M:imbACE.Core.commands.commandLineEntry.process(imbACE.Core.commands.commandLineEntry,System.String)">
            <summary>
            Processes the specified input and populates the entry
            </summary>
            <param name="entry">The entry.</param>
            <param name="input">The input.</param>
        </member>
        <member name="P:imbACE.Core.commands.commandLineEntry.inputLine">
            <summary> </summary>
        </member>
        <member name="P:imbACE.Core.commands.commandLineEntry.isSyntaxError">
            <summary>
            Indicates if the command had syntax error
            </summary>
        </member>
        <member name="P:imbACE.Core.commands.commandLineEntry.format">
            <summary>
            
            </summary>
        </member>
        <member name="P:imbACE.Core.commands.commandLineEntry.command">
            <summary>
            
            </summary>
        </member>
        <member name="P:imbACE.Core.commands.commandLineEntry.errorMessage">
            <summary>
            
            </summary>
        </member>
        <member name="P:imbACE.Core.commands.commandLineEntry.parameterName">
            <summary> </summary>
        </member>
        <member name="P:imbACE.Core.commands.commandLineEntry.parameterValue">
            <summary> </summary>
        </member>
        <member name="T:imbACE.Core.commands.commandSet`1">
            <summary>
            skup komandi 
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:imbACE.Core.commands.commandSet`1.Define(System.String,System.String,imbACE.Core.commands.aceCommandEvent,System.String)">
            <summary>
            Unosi definiciju komande
            </summary>
            <param name="__shortname"></param>
            <param name="__longname"></param>
            <param name="__handler"></param>
            <param name="__description"></param>
            <returns></returns>
        </member>
        <member name="P:imbACE.Core.commands.commandSet`1.format">
            <summary>
            Format komande
            </summary>
        </member>
        <member name="M:imbACE.Core.commands.commandSet`1.defaultCommands">
            <summary>
            Dodaje osnovne komande u set
            </summary>
        </member>
        <member name="P:imbACE.Core.commands.IAceCommand.commandShortName">
            <summary>
            character ili kratak string
            </summary>
        </member>
        <member name="P:imbACE.Core.commands.IAceCommand.commandFullname">
            <summary>
            Dugacak naziv komande - opisnog tipa
            </summary>
        </member>
        <member name="P:imbACE.Core.commands.IAceCommand.description">
            <summary>
            Opis komande
            </summary>
        </member>
        <member name="T:imbACE.Core.commands.menu.aceCommandLineOptions">
            <summary>
            Osnova za set command line opcija
            </summary>
        </member>
        <member name="M:imbACE.Core.commands.menu.aceCommandLineOptions.#ctor(imbSCI.Core.files.job.IAceComponent,imbACE.Core.operations.aceOperationSetExecutorBase[])">
            <summary>
            Menu command line
            </summary>
            <param name="__component"></param>
            <param name="__cmdLineOps"></param>
        </member>
        <member name="M:imbACE.Core.commands.menu.aceMenuItemMeta.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:imbACE.Core.commands.menu.aceMenuItemMeta"/> class.
            </summary>
        </member>
        <member name="F:imbACE.Core.commands.menu.aceMenuItemMeta._aliasList">
            <summary>
            alias names - alternativna imena ovog itema
            </summary>
        </member>
        <member name="P:imbACE.Core.commands.menu.aceMenuItemMeta.aliasList">
            <summary>
            alias names - alternativna imena ovog itema
            </summary>
        </member>
        <member name="F:imbACE.Core.commands.menu.aceMenuItemMeta._cmdParams">
            <summary>
            Expected parameters
            </summary>
        </member>
        <member name="P:imbACE.Core.commands.menu.aceMenuItemMeta.cmdParams">
            <summary>
            Expected parameters
            </summary>
        </member>
        <member name="P:imbACE.Core.commands.menu.aceMenuItemMeta.isMethodWithParameters">
            <summary>
            If the method has its own parameters and not using <see cref="!:imbACE.Services.operations.aceOperationArgs"/>
            </summary>
            <value>
            <c>true</c> if this instance is method with parameters; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="M:imbACE.Core.commands.menu.aceMenuItemMeta.deployFromMemberInfo(System.Reflection.MemberInfo)">
            <summary>
            Deploys <c>cmdParams</c> and other information from member information.
            </summary>
            <param name="mi">The mi.</param>
        </member>
        <member name="T:imbACE.Core.commands.menu.aceOperationArgs">
            <summary>
            Sadrzi dodatne podatke o operaciji
            </summary>
        </member>
        <member name="M:imbACE.Core.commands.menu.aceOperationArgs.#ctor(imbACE.Core.operations.aceOperationSetExecutorBase,imbACE.Core.commands.menu.core.aceMenuItemCollection,imbACE.Core.commands.menu.core.aceMenuItem,System.Reflection.MethodInfo,imbSCI.Core.files.job.IAceComponent)">
            <summary>
            Initializes a new instance of the <see cref="T:imbACE.Core.commands.menu.aceOperationArgs"/> class.
            </summary>
            <param name="__executor">The executor.</param>
            <param name="__menu">The menu.</param>
            <param name="__item">The item.</param>
            <param name="__method">The method.</param>
            <param name="__component">The component.</param>
        </member>
        <member name="P:imbACE.Core.commands.menu.aceOperationArgs.isMethodWithParameters">
            <summary>
            If the method has its own parameters and not using <see cref="T:imbACE.Core.commands.menu.aceOperationArgs"/>
            </summary>
            <value>
            <c>true</c> if this instance is method with parameters; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="M:imbACE.Core.commands.menu.aceOperationArgs.CloneFor(System.Collections.Generic.List{System.String},System.Collections.Generic.List{System.String})">
            <summary>
            Clones the object and sets values to the parameter set
            </summary>
            <param name="paramNames">The parameter names.</param>
            <param name="paramValues">The parameter values.</param>
            <returns></returns>
        </member>
        <member name="F:imbACE.Core.commands.menu.aceOperationArgs._paramSet">
            <summary>
            params
            </summary>
        </member>
        <member name="P:imbACE.Core.commands.menu.aceOperationArgs.paramSet">
            <summary>
            params
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:imbACE.Core.commands.menu.aceOperationArgs.GetInt32(System.String)" -->
        <member name="F:imbACE.Core.commands.menu.aceOperationArgs._method">
            <summary>
            Assigned method to invoke
            </summary>
        </member>
        <member name="P:imbACE.Core.commands.menu.aceOperationArgs.method">
            <summary>
            Assigned method to invoke
            </summary>
        </member>
        <member name="F:imbACE.Core.commands.menu.aceOperationArgs._component">
            <summary>
            referenca prema komponenti koja je relevantna za ovaj menu
            </summary>
        </member>
        <member name="P:imbACE.Core.commands.menu.aceOperationArgs.component">
            <summary>
            referenca prema komponenti koja je relevantna za ovaj menu
            </summary>
        </member>
        <member name="F:imbACE.Core.commands.menu.aceOperationArgs._methodInfo">
            <summary>
            Method member info - expanded
            </summary>
        </member>
        <member name="P:imbACE.Core.commands.menu.aceOperationArgs.methodInfo">
            <summary>
            Method member info - expanded
            </summary>
        </member>
        <member name="F:imbACE.Core.commands.menu.aceOperationArgs._menu">
            <summary>
            menu reference
            </summary>
        </member>
        <member name="P:imbACE.Core.commands.menu.aceOperationArgs.menu">
            <summary>
            menu reference
            </summary>
        </member>
        <member name="F:imbACE.Core.commands.menu.aceOperationArgs._item">
            <summary>
            assigned menu item
            </summary>
        </member>
        <member name="P:imbACE.Core.commands.menu.aceOperationArgs.item">
            <summary>
            assigned menu item
            </summary>
        </member>
        <member name="F:imbACE.Core.commands.menu.aceOperationArgs._itemMetaData">
            <summary>
            Meta data for item
            </summary>
        </member>
        <member name="P:imbACE.Core.commands.menu.aceOperationArgs.itemMetaData">
            <summary>
            Meta data for item
            </summary>
        </member>
        <member name="F:imbACE.Core.commands.menu.aceOperationArgs._executor">
            <summary>
            executor
            </summary>
        </member>
        <member name="P:imbACE.Core.commands.menu.aceOperationArgs.executor">
            <summary>
            executor
            </summary>
        </member>
        <member name="F:imbACE.Core.commands.menu.aceOperationArgs._shema">
            <summary>
            propertyS shema with context
            </summary>
        </member>
        <member name="P:imbACE.Core.commands.menu.aceOperationArgs.shema">
            <summary>
            propertyS shema with context
            </summary>
        </member>
        <member name="P:imbACE.Core.commands.menu.core.aceMenu.menuTitle">
            <summary>
            Naslov menija
            </summary>
        </member>
        <member name="P:imbACE.Core.commands.menu.core.aceMenu.menuDescription">
            <summary>
            Opis ispod menija
            </summary>
        </member>
        <member name="T:imbACE.Core.commands.menu.core.aceMenuItem">
            <summary>
            Osnovna klasa za meni item
            </summary>
        </member>
        <member name="F:imbACE.Core.commands.menu.core.aceMenuItem._itemMetaInfo">
            <summary>
            Meta object
            </summary>
        </member>
        <member name="P:imbACE.Core.commands.menu.core.aceMenuItem.itemMetaInfo">
            <summary>
            Meta object
            </summary>
        </member>
        <member name="M:imbACE.Core.commands.menu.core.aceMenuItem.executeMeta">
            <summary>
            Executes the meta object
            </summary>
            <seealso cref="T:imbACE.Core.commands.menu.aceOperationArgs"/>
            <returns></returns>
        </member>
        <member name="P:imbACE.Core.commands.menu.core.aceMenuItem.group">
            <summary>
            Bindable property
            </summary>
        </member>
        <member name="P:imbACE.Core.commands.menu.core.aceMenuItem.helpLine">
            <summary>
            tekst koji se vidi kada je menu item odabran
            </summary>
        </member>
        <member name="P:imbACE.Core.commands.menu.core.aceMenuItem.index">
            <summary>
            broj koji ga aktivira
            </summary>
        </member>
        <member name="P:imbACE.Core.commands.menu.core.aceMenuItem.key">
            <summary>
            Slovo ili kratak string koje ga aktivira
            </summary>
        </member>
        <member name="P:imbACE.Core.commands.menu.core.aceMenuItem.itemName">
            <summary>
            Naziv itema koji se prikazuje u meniju
            </summary>
        </member>
        <member name="P:imbACE.Core.commands.menu.core.aceMenuItem.itemRemarkEnabled">
            <summary>
            Komentar koji se upisuje kada je item enabled
            </summary>
        </member>
        <member name="P:imbACE.Core.commands.menu.core.aceMenuItem.itemRemarkDisabled">
            <summary>
            Komentar koji se upisuje kada je item disabled
            </summary>
        </member>
        <member name="P:imbACE.Core.commands.menu.core.aceMenuItem.metaObject">
            <summary>
            Dodatni objekat
            </summary>
        </member>
        <member name="P:imbACE.Core.commands.menu.core.aceMenuItem.metaStringData">
            <summary>
            Dodatni string data
            </summary>
        </member>
        <member name="T:imbACE.Core.commands.menu.core.aceMenuItemCollection">
            <summary>
            Collection of menu items
            </summary>
            <remarks>
            
            </remarks>
            <example>
            <c>menu.setItems(this, application.mainComponent);</c>
            </example>
            <seealso cref="!:imbACE.Core.collection.aceCollection&lt;imbACE.Services.menu.core.aceMenuItem&gt;" />
            <seealso cref="T:imbACE.Core.operations.aceOperationSetExecutorBase"/> 
        </member>
        <member name="P:imbACE.Core.commands.menu.core.aceMenuItemCollection.defaultOption">
            <summary>
            Opcija koja ce biti podrazumevana
            </summary>
        </member>
        <member name="P:imbACE.Core.commands.menu.core.aceMenuItemCollection.currentItemGroup">
            <summary>
            Bindable property
            </summary>
        </member>
        <member name="M:imbACE.Core.commands.menu.core.aceMenuItemCollection.setItem(System.String,System.String,System.String,System.Boolean)">
            <summary>
            Postavlja novi item u menu
            </summary>
            <param name="itemTitle"></param>
            <param name="itemDisabledRemarks"></param>
            <param name="itemKey"></param>
            <param name="isDefault"></param>
        </member>
        <member name="M:imbACE.Core.commands.menu.core.aceMenuItemCollection.setItem(imbACE.Core.commands.menu.core.aceMenuItem)">
            <summary>
            Adds externally created aceMenuItem object
            </summary>
            <param name="_item">aceMenuItem object that was created outside</param>
        </member>
        <member name="M:imbACE.Core.commands.menu.core.aceMenuItemCollection.setItems(imbACE.Core.operations.aceOperationSetExecutorBase,imbSCI.Core.files.job.IAceComponent,System.Reflection.BindingFlags)">
            <summary>
            Populates menu with provided <c>executor</c>
            </summary>
            <param name="executor">The executor: Console or Screen that performs operations</param>
            <param name="component">The specific component that is related to the execution of this menu</param>
        </member>
        <member name="M:imbACE.Core.commands.menu.core.aceMenuItemCollection.setItems(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Populates menu with provided collection of strings
            </summary>
            <param name="_input"></param>
        </member>
        <member name="M:imbACE.Core.commands.menu.core.aceMenuItemCollection.setItems(System.Enum)">
            <summary>
            Sets items by Enum <c>defOption</c> type values and sets <c>defOption</c> as default selection
            </summary>
            <param name="defOption">The definition option.</param>
        </member>
        <member name="M:imbACE.Core.commands.menu.core.aceMenuItemCollection.setItems``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Populates menu with IEnumerable Enum values. It automatically takes aceMenuItem attribute values from Enum declaration
            </summary>
            <typeparam name="T">Enum with proper aceMenuItem attributes set</typeparam>
            <param name="_input">Array of Enum values</param>
        </member>
        <member name="M:imbACE.Core.commands.menu.core.aceMenuItemCollection.Remove(System.Collections.Generic.IEnumerable{imbACE.Core.commands.menu.core.aceMenuItem})">
            <summary>
            Sklanja celu kolekciju iz menija
            </summary>
            <param name="items"></param>
        </member>
        <member name="M:imbACE.Core.commands.menu.core.aceMenuItemCollection.getDefaultItem(System.Int32)">
            <summary>
            Vraca default item - 
            </summary>
            <param name="defOption">ako je -1 onda koristi podesavanja iz menija, ako je -2 onda vraca null</param>
            <returns></returns>
        </member>
        <member name="M:imbACE.Core.commands.menu.core.aceMenuItemCollection.getItem(System.String,System.Int32,System.Boolean,System.Boolean)">
            <summary>
            Vraca manuItem u skladu sa ulaznim parametrom - koristi se kod otvorenog unosa kljuca
            </summary>
            <param name="input">String vrednost moze biti broj ili key string</param>
            <param name="defOption">Ako je input neprihvatljiv onda default option</param>
            <returns>vraca item</returns>
        </member>
        <member name="P:imbACE.Core.commands.menu.core.aceMenuItemCollection.doSkipDisabled">
            <summary>
            disejblovani itemi ne mogu da budu selektovani
            </summary>
        </member>
        <member name="M:imbACE.Core.commands.menu.core.aceMenuItemCollection.selectPrev">
            <summary>
            Pomera seleektovan item na prethodno mesto
            </summary>
        </member>
        <member name="M:imbACE.Core.commands.menu.core.aceMenuItemCollection.selectNext">
            <summary>
            Pomera selektovan item za sledece mesto
            </summary>
        </member>
        <member name="M:imbACE.Core.commands.menu.core.aceMenuItemCollection.getMaxKeyLength">
            <summary>
            Najveca sirina key-a
            </summary>
            <returns></returns>
        </member>
        <member name="P:imbACE.Core.commands.menu.core.aceMenuItemCollection.selected">
            <summary>
            selected item
            </summary>
        </member>
        <member name="M:imbACE.Core.commands.menu.core.aceMenuItemCollection.isSelected(imbACE.Core.commands.menu.core.aceMenuItem)">
            <summary>
            Checks if given item is currently selected
            </summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="P:imbACE.Core.commands.menu.core.aceMenuItemCollection.disabledItems">
            <summary>
            namesAndKeysOfDisabledItems
            </summary>
        </member>
        <member name="M:imbACE.Core.commands.menu.core.aceMenuItemCollection.selectFirstEnabled(imbACE.Core.commands.menu.core.aceMenuItem[])">
            <summary>
            postavlja za selektovanu opciju prvu stavku koja nije disejblovana
            </summary>
            <param name="items"></param>
        </member>
        <member name="T:imbACE.Core.commands.menu.render.menuRenderFlag">
            <summary>
            Flagovi - menuRenderFlag
            </summary>
        </member>
        <member name="F:imbACE.Core.commands.menu.render.menuRenderFlag.loadOnlyIfNotLoaded">
            <summary>
            Izvrsice ucitavanje samo ako isti URL / komanda nije poslednja koja je izvrsena
            </summary>
        </member>
        <member name="F:imbACE.Core.commands.menu.render.menuRenderFlag.showSelectionBox">
            <summary>
            Da li prikazuje selectionBox ispred menija
            </summary>
        </member>
        <member name="F:imbACE.Core.commands.menu.render.menuRenderFlag.showIfDefault">
            <summary>
            da li prikazuje ako je defailt
            </summary>
        </member>
        <member name="F:imbACE.Core.commands.menu.render.menuRenderFlag.showInlineRemarks">
            <summary>
            pokazuje napomene u liniji
            </summary>
        </member>
        <member name="F:imbACE.Core.commands.menu.render.menuRenderFlag.showSelectedRemarks">
            <summary>
            pokazuje napomenu za selektovan item
            </summary>
        </member>
        <member name="E:imbACE.Core.commands.menu.render.renderBase.PropertyChanged">
            <summary>
            Generise izlaz za prosledjen item - ovu funkciju treba da koriste ostale funkcije viseg nivoa
            </summary>
            <param name="item"></param>
            <param name="itemRendering"></param>
            <param name="isDisabled"></param>
            <param name="isSelected"></param>
            <param name="isDefault"></param>
            <returns></returns>
        </member>
        <member name="P:imbACE.Core.commands.menu.render.renderForTerminal.formatNumberBox">
            <summary>
            Formatiranje za number/key box
            </summary>
        </member>
        <member name="P:imbACE.Core.commands.menu.render.renderForTerminal.formatForItem">
            <summary>
            formatiranje za item
            </summary>
        </member>
        <member name="P:imbACE.Core.commands.menu.render.renderForTerminal.formatForSelection">
            <summary>
            format za prikaz selekcije
            </summary>
        </member>
        <member name="P:imbACE.Core.commands.menu.render.renderForTerminal.formatNumberOrKey">
            <summary>
            numberOrKey box format
            </summary>
        </member>
        <member name="P:imbACE.Core.commands.menu.render.renderTask.task">
            <summary>
            Bindable property
            </summary>
        </member>
        <member name="P:imbACE.Core.commands.menu.render.renderTask.renderFlags">
            <summary>
            Bindable property
            </summary>
        </member>
        <member name="P:imbACE.Core.commands.menu.render.renderTask.group">
            <summary>
            Bindable property
            </summary>
        </member>
        <member name="P:imbACE.Core.commands.menu.render.renderTask.priority">
            <summary>
            Bindable property
            </summary>
        </member>
        <member name="T:imbACE.Core.commands.snippet.snippet">
            <summary>
            Pomoćna klasa koja sadrži podatke o učitanom snippet-u
            </summary>
        </member>
        <member name="P:imbACE.Core.commands.snippet.snippet.type">
            <summary>
            tip snipeta
            </summary>
        </member>
        <member name="P:imbACE.Core.commands.snippet.snippet.filepath">
            <summary>
            potpuna putanja prema snippetu
            </summary>
        </member>
        <member name="P:imbACE.Core.commands.snippet.snippet.snippetTypeStrings">
            <summary>
            String lista snippet tipova
            </summary>
        </member>
        <member name="P:imbACE.Core.commands.snippet.snippet.name">
            <summary>
            naziv snippeta
            </summary>
        </member>
        <member name="P:imbACE.Core.commands.snippet.snippet.shortcut">
            <summary>
            precica koja ga aktivira
            </summary>
        </member>
        <member name="P:imbACE.Core.commands.snippet.snippet.description">
            <summary>
            Opis snippeta
            </summary>
        </member>
        <member name="P:imbACE.Core.commands.snippet.snippet.code">
            <summary>
            kod koji se ubacuje
            </summary>
        </member>
        <member name="P:imbACE.Core.commands.snippet.snippet.literals">
            <summary>
            Kolekcija literala - parametara
            </summary>
        </member>
        <member name="M:imbACE.Core.commands.snippet.snippet.#ctor">
            <summary>
            default object konstruktor
            </summary>
        </member>
        <member name="T:imbACE.Core.commands.snippet.snippetParameter">
            <summary>
            Snippet parametar
            </summary>
        </member>
        <member name="P:imbACE.Core.commands.snippet.snippetParameter.ID">
            <summary>
            jedinstvena identifikacija
            </summary>
        </member>
        <member name="P:imbACE.Core.commands.snippet.snippetParameter.ToolTip">
            <summary>
            Tool tip poruka
            </summary>
        </member>
        <member name="P:imbACE.Core.commands.snippet.snippetParameter.Default">
            <summary>
            Podrazumevana vrednost
            </summary>
        </member>
        <member name="P:imbACE.Core.commands.snippet.snippetParameter.Function">
            <summary>
            funkcija koja dinamicki daje vrednost
            </summary>
        </member>
        <member name="P:imbACE.Core.commands.tree.commandTree.flatAccess">
            <summary>
            Flat dictionary of all commands
            </summary>
            <value>
            The flat access.
            </value>
        </member>
        <member name="P:imbACE.Core.commands.tree.commandTree.plugins">
            <summary>
            ValueType properties that may be directly assigned
            </summary>
            <value>
            The properties.
            </value>
        </member>
        <member name="P:imbACE.Core.commands.tree.commandTree.properties">
            <summary>
            ValueType properties that may be directly assigned
            </summary>
            <value>
            The properties.
            </value>
        </member>
        <member name="P:imbACE.Core.commands.tree.commandTree.modules">
            <summary>
            Class properties that are not <see cref="!:imbACE.Services.operations.IAceOperationSetExecutor"/>
            </summary>
            <value>
            The modules.
            </value>
        </member>
        <member name="P:imbACE.Core.commands.tree.commandTreeDescription.description">
            <summary>
            Human-readable description of object instance
            </summary>
        </member>
        <member name="F:imbACE.Core.commands.tree.commandTreeNodeLevel.type">
            <summary>
            Node represents one of types in inherence hierarchy
            </summary>
        </member>
        <member name="F:imbACE.Core.commands.tree.commandTreeNodeLevel.group">
            <summary>
            The group: Node represents one of groups in command list of the type
            </summary>
        </member>
        <member name="F:imbACE.Core.commands.tree.commandTreeNodeLevel.command">
            <summary>
            The command: Node represents a command in the type
            </summary>
        </member>
        <member name="F:imbACE.Core.commands.tree.commandTreeNodeLevel.plugin">
            <summary>
            The sub type: property with execution capabilities
            </summary>
        </member>
        <member name="M:imbACE.Core.commands.tree.commandTreeReportTools.ReportCommandTree(imbACE.Core.commands.tree.commandTree,imbSCI.Core.reporting.render.ITextRender,System.Boolean,System.Int32,imbACE.Core.commands.tree.aceCommandConsoleHelpOptions)">
            <summary>
            Reports the command tree.
            </summary>
            <param name="tree">The tree.</param>
            <param name="output">The output.</param>
        </member>
        <member name="M:imbACE.Core.commands.tree.commandTreeTools.BuildCommandTree(imbACE.Core.operations.IAceOperationSetExecutor)">
            <summary>
            Builds the command tree.
            </summary>
            <param name="source">The source.</param>
            <returns></returns>
        </member>
        <member name="M:imbACE.Core.commands.tree.commandTreeTools.BuildTreeNodeForType(System.Type,imbACE.Core.operations.IAceOperationSetExecutor,imbACE.Core.commands.tree.commandTreeDescription,System.String,imbACE.Core.commands.tree.commandTreeNodeLevel)">
            <summary>
            Builds the type of the tree node for.
            </summary>
            <param name="type">The type.</param>
            <param name="source">The source.</param>
            <param name="host">The host.</param>
            <returns></returns>
        </member>
        <!-- Badly formed XML comment ignored for member "M:imbACE.Core.core.aceBindable.OnPropertyChanged(System.String)" -->
        <member name="T:imbACE.Core.core.aceComponentBase`1">
            <summary>
            Osnova za kompaktne izvrsne komponente --- deprecated
            </summary>
        </member>
        <member name="M:imbACE.Core.core.aceComponentBase`1.#ctor">
            <summary>
            Sets the default folder structure
            </summary>
        </member>
        <member name="M:imbACE.Core.core.aceComponentBase`1.makeFolderStructure">
            <summary>
            Makes the folder structure - and generates readme_structure / directory files
            </summary>
        </member>
        <member name="P:imbACE.Core.core.aceComponentBase`1.folderStructure">
            <summary> </summary>
        </member>
        <member name="P:imbACE.Core.core.aceComponentBase`1.terminal">
            <summary>
            instanca terminala koji koristi za logovanje
            </summary>
        </member>
        <member name="P:imbACE.Core.core.aceComponentBase`1.notation">
            <summary>
            
            </summary>
        </member>
        <member name="M:imbACE.Core.core.aceComponentBase`1.saveSettings">
            <summary>
            Snima vrednosti podesavanja
            </summary>
        </member>
        <member name="P:imbACE.Core.core.aceComponentBase`1.settings">
            <summary>
            Podesavanja komponente
            </summary>
        </member>
        <member name="F:imbACE.Core.core.aceComponentBase`1._name">
            <summary>
            Component name
            </summary>
        </member>
        <member name="P:imbACE.Core.core.aceComponentBase`1.name">
            <summary>
            Component name
            </summary>
        </member>
        <member name="M:imbACE.Core.core.aceComponentBase`1.generateFolderReadme(System.Collections.Generic.IEnumerable{imbSCI.Core.files.folders.folderNode},imbSCI.Core.files.folders.folderNode)">
            <summary>
            Generates the folder readme.
            </summary>
            <param name="folders">The folders.</param>
            <param name="folder">The folder.</param>
            <returns></returns>
        </member>
        <member name="M:imbACE.Core.core.aceComponentBase`1.settingsLoadOrDefault">
            <summary>
            Proverava da li su instancirana podesavanja -- ako nisu ucitava postojeca ili kreira default objekat
            </summary>
        </member>
        <member name="T:imbACE.Core.core.aceLog">
            <summary>
            ACE main log system
            </summary>
            <seealso cref="T:imbSCI.Core.reporting.render.ITextRender" />
        </member>
        <member name="P:imbACE.Core.core.aceLog.consoleControl">
            <summary>
            static and autoinitiated object
            </summary>
        </member>
        <member name="F:imbACE.Core.core.aceLog.autosaveEnabled">
            <summary>
            Global autosave enabled
            </summary>
        </member>
        <member name="F:imbACE.Core.core.aceLog.autoFlushLogPageKByteLimit">
            <summary>
            The automatic flush log content if the limit is reached. Flushed contet saves under unique page filename
            </summary>
        </member>
        <member name="F:imbACE.Core.core.aceLog.autosaveTimeSpanOn">
            <summary>
            If true it will control overfreq autosave
            </summary>
        </member>
        <member name="F:imbACE.Core.core.aceLog.autosaveTimeSpanInSec">
            <summary>
            Time required to unlock next autosave
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:imbACE.Core.core.aceLog.saveAllLogs(System.Boolean)" -->
        <member name="P:imbACE.Core.core.aceLog.lastSaveAllLogsCall">
            <summary>
            
            </summary>
        </member>
        <member name="M:imbACE.Core.core.aceLog.logAutoSavePermission(imbACE.Core.core.builderForLog,System.DateTime,System.Boolean)">
            <summary>
            Gets if  automatic save is allowed for the instance
            </summary>
            <param name="source">The source.</param>
            <param name="lastAutoSave">The last automatic save.</param>
            <returns></returns>
        </member>
        <member name="M:imbACE.Core.core.aceLog.log(System.String,System.Object,System.Boolean)">
            <summary>
            Logs the specified message via the main <see cref="P:imbACE.Core.core.aceLog.loger"/>. If the <c>instance specified creates <c>ToStringDump</c> limited output</c>
            </summary>
            <param name="message">The message.</param>
            <param name="instance">The instance.</param>
        </member>
        <member name="P:imbACE.Core.core.aceLog.loger">
            <summary>
            The main log mechanism for aceCommonTypes
            </summary>
        </member>
        <member name="P:imbACE.Core.core.aceLog.logBuilderRegistry">
            <summary>
            static and autoinitiated object
            </summary>
        </member>
        <member name="M:imbACE.Core.core.aceLog.wait(System.Int32,System.String)">
            <summary>
            Waits the specified n of seconds. If thick meessage undefined it writes: 1... 2... 3... and so on.
            </summary>
            <param name="seconds">The seconds.</param>
            <param name="thickMessage">The thick message.</param>
        </member>
        <member name="P:imbACE.Core.core.aceLog.externalLogBuilder">
            <summary>
            Extern log builder instance that will override its own builder
            </summary>
        </member>
        <member name="P:imbACE.Core.core.aceLog.logBuilder">
            <summary>
            static and autoinitiated object
            </summary>
        </member>
        <member name="F:imbACE.Core.core.aceLogGlobalFlags.enable_GlobalLogAutosave">
            <summary>
            Enable <see cref="T:imbACE.Core.core.builderForLog"/> auto save log content on update/timespan
            </summary>
        </member>
        <member name="F:imbACE.Core.core.aceLogGlobalFlags.enable_GlobalLogAutosaveWithTimer">
            <summary>
            The enable global log autosave time span: 
            </summary>
        </member>
        <member name="F:imbACE.Core.core.aceLogGlobalFlags.enable_GlobalLogOutputSplitPageOn">
            <summary>
            Registered global logs will break and flush their content on every n
            </summary>
        </member>
        <member name="T:imbACE.Core.core.aceLogRegistry">
            <summary>
            aceLog ILogBuilder registry collection
            </summary>
        </member>
        <member name="M:imbACE.Core.core.aceLogRegistry.getLogContent(System.Enum)">
            <summary>
            Gets content of the log specified by <see cref="!:aceCommonTypes.enums.logOutputSpecial"/> or some other <c>Enum</c> key
            </summary>
            <param name="key">The key.</param>
            <returns></returns>
        </member>
        <member name="M:imbACE.Core.core.aceLogRegistry.getLogContentFromObject(System.Object)">
            <summary>
            Gets the log content from object.
            </summary>
            <param name="input">The input.</param>
            <returns></returns>
        </member>
        <member name="M:imbACE.Core.core.aceLogRegistry.getLogBuilderOfType``1(System.Enum)">
            <summary>
            Gets the type of the log builder of.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="key">The key.</param>
            <returns></returns>
        </member>
        <member name="M:imbACE.Core.core.aceLogRegistry.getLogBuilder(System.Enum)">
            <summary>
            Gets the log builder.
            </summary>
            <param name="key">The key.</param>
            <returns></returns>
        </member>
        <member name="M:imbACE.Core.core.aceLogRegistry.Add(System.Object,System.Object,System.Boolean)">
            <summary>
            Adds an autosave enabled <c>item</c>, under the <c>key</c> specified
            </summary>
            <param name="key">The key : allowed types are String and Enumerations.</param>
            <param name="item">The item.</param>
            <returns>
            <see cref="T:System.Boolean"/> false if <c>item</c> registration failed otherwise <see cref="T:System.String"/> with reserved file path
            </returns>
        </member>
        <member name="P:imbACE.Core.core.aceLogRegistry.reservedFileNames">
            <summary>
            Gets or sets the reserved file names.
            </summary>
            <value>
            The reserved file names.
            </value>
        </member>
        <member name="P:imbACE.Core.core.aceLogRegistry.reservedFilenameAsKey">
            <summary>
            Description of $property$
            </summary>
        </member>
        <member name="M:imbACE.Core.core.aceLogRegistry.reserveFileName(System.Object,System.Object,System.Boolean)">
            <summary>
            Reserves the name of the file.
            </summary>
            <param name="key">The key.</param>
            <param name="item">The item.</param>
            <returns></returns>
        </member>
        <member name="M:imbACE.Core.core.aceLogRegistry.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through <see cref="P:imbACE.Core.core.aceLogRegistry.reservedFileNames"/> Dictionary. Item type is <see cref="T:System.Collections.Generic.KeyValuePair`2"/> where <c>Value</c> is designated location for log content save
            </summary>
            <returns>
            An <see cref="T:System.Collections.IEnumerator" /> object that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="P:imbACE.Core.core.aceLogRegistry.items">
            <summary>
            Gets or sets the items.
            </summary>
            <value>
            The items.
            </value>
        </member>
        <member name="T:imbACE.Core.core.aceSettingsBase">
            <summary>
            Base class for ace settings holder
            </summary>
            <seealso cref="T:imbSCI.Data.data.imbBindable" />
        </member>
        <member name="P:imbACE.Core.core.aceSettingsBase.wasLoaded">
            <summary>
            
            </summary>
        </member>
        <member name="T:imbACE.Core.core.aceSettingsStandaloneBase">
            <summary>
            Settings container with Load() and Save() standalone implementation. 
            </summary>
            <seealso cref="T:imbACE.Core.core.aceSettingsBase" />
        </member>
        <member name="P:imbACE.Core.core.aceSettingsStandaloneBase.settings_filepath">
            <summary> </summary>
        </member>
        <member name="P:imbACE.Core.core.aceSettingsStandaloneBase.path_with_filename_settings">
            <summary>
            Gets the path with full filename
            </summary>
            <value>
            The path with full filepath and file name
            </value>
        </member>
        <member name="M:imbACE.Core.core.aceSettingsStandaloneBase.Poke">
            <summary>
            Empty method used just to trigger autoload if required
            </summary>
        </member>
        <member name="M:imbACE.Core.core.aceSettingsStandaloneBase.Load">
            <summary>
            Loads and auto saves
            </summary>
        </member>
        <member name="M:imbACE.Core.core.aceSettingsStandaloneBase.Save(System.String)">
            <summary>
            Saves the current settings. If filepath specified it will use it to save into. This will not change default load location.
            </summary>
        </member>
        <member name="T:imbACE.Core.core.builderForLog">
            <summary>
            Special builder for log files. Has special call: log(). Immediate save as option
            </summary>
            <seealso cref="T:imbSCI.Core.reporting.render.builders.builderForMarkdown" />
            <seealso cref="T:imbSCI.Core.reporting.render.ITextRender" />
        </member>
        <member name="M:imbACE.Core.core.builderForLog.AppendDataFields(imbSCI.Core.collection.PropertyCollectionExtended)">
            <summary>
            Appends its data points into new or existing property collection: log statistics
            </summary>
            <param name="data">Property collection to add data into</param>
            <returns>Updated or newly created property collection</returns>
        </member>
        <member name="M:imbACE.Core.core.builderForLog.imbSCI#Core#reporting#IAppendDataFields#AppendDataFields(System.Data.PropertyCollection)">
            <summary>
            Appends its data points into new or existing property collection
            </summary>
            <param name="data">Property collection to add data into</param>
            <returns>
            Updated or newly created property collection
            </returns>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:imbACE.Core.core.builderForLog.registerLogBuilder(imbSCI.Data.enums.logOutputSpecial,System.Boolean)">
            <summary>
            Registers the log builder.
            </summary>
            <param name="logid">The logid.</param>
            <returns></returns>
        </member>
        <member name="M:imbACE.Core.core.builderForLog.#ctor(imbSCI.Data.enums.logOutputSpecial)">
            <summary>
            Automatically registers the builder for log
            </summary>
            <param name="logid">The logid.</param>
        </member>
        <member name="M:imbACE.Core.core.builderForLog.#ctor">
            <summary>
            Builder without attached files
            </summary>
        </member>
        <member name="M:imbACE.Core.core.builderForLog.#ctor(System.String,System.Boolean,imbSCI.Data.enums.getWritableFileMode)">
            <summary>
            New instance of <see cref="T:imbACE.Core.core.builderForLog"/> 
            </summary>
            <param name="__filename">The log output filename with extension .md. It will automatically set .md extension</param>
            <param name="autoSave">if set to <c>true</c> if will do automatic save on each log call.</param>
        </member>
        <member name="F:imbACE.Core.core.builderForLog._outputPath">
            <summary>
            The output path
            </summary>
        </member>
        <member name="P:imbACE.Core.core.builderForLog.outputPath">
            <summary>
            
            </summary>
        </member>
        <member name="M:imbACE.Core.core.builderForLog.open(System.String,System.String,System.String)">
            <summary>
            Opens the specified tag.
            </summary>
            <param name="tag">The tag.</param>
            <param name="title"></param>
            <param name="description"></param>
            <returns></returns>
            \ingroup_disabled renderapi_append
        </member>
        <member name="M:imbACE.Core.core.builderForLog.close(System.String)">
            <summary>
            Dodaje HTML zatvaranje taga -- zatvara poslednji koji je otvoren
            </summary>
            <param name="tag"></param>
            <returns></returns>
            <remarks>
            Ako je prosledjeni tag none onda zatvara poslednji tag koji je otvoren.
            </remarks>
            \ingroup_disabled renderapi_append
        </member>
        <member name="M:imbACE.Core.core.builderForLog.logF(System.String,System.Object[])">
            <summary>
            Log with Formatted message string
            </summary>
            <param name="message">The message.</param>
            <param name="fin">The fin.</param>
        </member>
        <member name="M:imbACE.Core.core.builderForLog.log(System.String)">
            <summary>
            Logs the specified message. Adds short time string in front of message
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:imbACE.Core.core.builderForLog.save">
            <summary>
            Saves the content
            </summary>
        </member>
        <member name="P:imbACE.Core.core.builderForLog.lastAutoSave">
            <summary>
            
            </summary>
        </member>
        <member name="P:imbACE.Core.core.builderForLog.outputSubPath">
            <summary>
            
            </summary>
        </member>
        <member name="P:imbACE.Core.core.builderForLog.immediateSaveOn">
            <summary>
            Loger will automatically save its content after each new line
            </summary>
        </member>
        <member name="P:imbACE.Core.core.builderForLog.filename">
            <summary>
            Filename used to stora log on hdd
            </summary>
        </member>
        <member name="P:imbACE.Core.core.builderForLog.logContent">
            <summary>
            Gets the content of the log.
            </summary>
            <value>
            The content of the log.
            </value>
        </member>
        <member name="T:imbACE.Core.core.clipboard">
            <summary>
            Clipboard operations
            </summary>
        </member>
        <member name="M:imbACE.Core.core.clipboard.clipboardSetText(System.String)">
            <summary>
            Sets the text.
            </summary>
            <param name="input">The input.</param>
        </member>
        <member name="P:imbACE.Core.core.clipboardGetter.data">
            <summary>
            
            </summary>
        </member>
        <member name="M:imbACE.Core.core.diagnostic.builderForLogEnhanced.logStartPhase(System.String,System.String)">
            <summary>
            Starts a phase in logging process
            </summary>
            <param name="title">The title.</param>
            <param name="message">The message.</param>
        </member>
        <member name="M:imbACE.Core.core.diagnostic.builderForLogEnhanced.logEndPhase">
            <summary>
            Closes a phase in the logging proces
            </summary>
            <returns></returns>
        </member>
        <member name="P:imbACE.Core.core.diagnostic.builderForLogEnhanced.stopwatch">
            <summary>
            Stop watch used internally
            </summary>
        </member>
        <member name="M:imbACE.Core.core.diagnostic.builderForLogEnhanced.AppendException(System.String,System.Exception,System.Int32)">
            <summary>
            Appends the exception.
            </summary>
            <param name="title">The title.</param>
            <param name="ex">The ex.</param>
            <param name="exceptionLevel">The exception level.</param>
        </member>
        <member name="M:imbACE.Core.core.diagnostic.builderForLogEnhanced.open(System.String,System.String,System.String)">
            <summary>
            Opens the specified tag.
            </summary>
            <param name="tag">The tag.</param>
            <param name="title"></param>
            <param name="description"></param>
            <returns></returns>
            \ingroup_disabled renderapi_append
        </member>
        <member name="M:imbACE.Core.core.diagnostic.builderForLogEnhanced.close(System.String)">
            <summary>
            Dodaje HTML zatvaranje taga -- zatvara poslednji koji je otvoren
            </summary>
            <param name="tag"></param>
            <returns></returns>
            <remarks>
            Ako je prosledjeni tag none onda zatvara poslednji tag koji je otvoren.
            </remarks>
            \ingroup_disabled renderapi_append
        </member>
        <member name="T:imbACE.Core.core.diagnostic.callerInfo">
            <summary>
            2014 Svi moguci podaci pozivu
            </summary>
        </member>
        <member name="M:imbACE.Core.core.diagnostic.callerInfo.getExecutionFrame(System.Object,System.Collections.Generic.IEnumerable{System.Type})">
            <summary>
            Pronalazi prvi frame koji nije na spisku za preskakanje
            </summary>
            <param name="parent"></param>
            <returns></returns>
        </member>
        <member name="M:imbACE.Core.core.diagnostic.callerInfo.getExecutionFrameByMethod(System.Reflection.MethodBase)">
            <summary>
            Pronalazi prvi frame koji je pozvan ovim metodom
            </summary>
            <param name="mb"></param>
            <returns></returns>
        </member>
        <member name="M:imbACE.Core.core.diagnostic.callerInfo.AppendDataFields(imbSCI.Core.collection.PropertyCollectionExtended)">
            <summary>
            Appends its data points into new or existing property collection
            </summary>
            <param name="data">Property collection to add data into</param>
            <returns>Updated or newly created property collection</returns>
        </member>
        <member name="M:imbACE.Core.core.diagnostic.callerInfo.imbSCI#Core#reporting#IAppendDataFields#AppendDataFields(System.Data.PropertyCollection)">
            <summary>
            Appends its data points into new or existing property collection
            </summary>
            <param name="data">Property collection to add data into</param>
            <returns>
            Updated or newly created property collection
            </returns>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="F:imbACE.Core.core.diagnostic.callerInfo.label">
            <summary>
            skraceni prikaz 
            </summary>
        </member>
        <member name="F:imbACE.Core.core.diagnostic.callerInfo.sufix">
            <summary>
            dodatne informacije
            </summary>
        </member>
        <member name="M:imbACE.Core.core.diagnostic.callerInfo.getCallerInfo(System.Diagnostics.StackFrame,System.Boolean)">
            <summary>
            
            </summary>
            <param name="sf"></param>
            <param name="getCode">Kompleksnija operacija - daje vise informacija</param>
            <returns></returns>
        </member>
        <member name="T:imbACE.Core.core.diagnostic.exceptionExtensions">
            <summary>
            Extensions for reporting on Exceptions
            </summary>
        </member>
        <member name="M:imbACE.Core.core.diagnostic.exceptionExtensions.doThrow(imbSCI.Data.enums.onErrorPolicy)">
            <summary>
            Returns TRUE if the <c>policy</c> instructs throwing exception
            </summary>
            <param name="policy">The policy.</param>
            <returns></returns>
        </member>
        <member name="M:imbACE.Core.core.diagnostic.exceptionExtensions.getCallerInfoReport(imbACE.Core.core.diagnostic.callerInfo)">
            <summary>
            Gets the caller information report.
            </summary>
            <param name="output">The output.</param>
            <returns></returns>
        </member>
        <member name="F:imbACE.Core.core.diagnostic.exceptionExtensions.ERROR_serialization_Interface">
            <summary>
            Prepoznaje gresku u serijalizaciji
            </summary>
        </member>
        <member name="P:imbACE.Core.core.diagnostic.exceptionExtensions.regex_ourStack">
            <summary>
            imbControl property regex_ourStack tipa Regex
            </summary>
        </member>
        <member name="M:imbACE.Core.core.diagnostic.exceptionExtensions.googleException(System.Exception,imbACE.Core.core.diagnostic.callerInfo)">
            <summary>
            Google search about the exception
            </summary>
            <param name="ex">The ex.</param>
            <param name="ci">The ci.</param>
        </member>
        <member name="M:imbACE.Core.core.diagnostic.exceptionExtensions.reportSummary(System.Exception,imbSCI.Core.reporting.render.ITextRender,System.String)">
            <summary>
            Writes a summary report into ITextRender
            </summary>
            <param name="ex">The ex.</param>
            <param name="sb">The sb.</param>
            <param name="summaryTitle">The summary title.</param>
            <returns></returns>
        </member>
        <member name="M:imbACE.Core.core.diagnostic.exceptionExtensions.cleanStackTrace(System.String,imbSCI.Core.reporting.render.ITextRender)">
            <summary>
            Pravi stack trace izvestaj
            </summary>
            <param name="stackTrace"></param>
            <param name="sb"></param>
            <returns></returns>
        </member>
        <member name="M:imbACE.Core.core.diagnostic.exceptionExtensions.describe(System.Exception,imbSCI.Core.reporting.render.ITextRender,System.String)">
            <summary>
            Primary method for exception description
            </summary>
            <param name="ex"></param>
            <param name="sb"></param>
        </member>
        <member name="M:imbACE.Core.core.diagnostic.exceptionExtensions.getLastInner(System.Exception)">
            <summary>
            Retrieves the last exception nested as InnerException
            </summary>
            <param name="ex">The ex.</param>
            <returns>InnerException found</returns>
        </member>
        <member name="T:imbACE.Core.core.diagnostic.imbConsoleLog">
            <summary>
            Complex log entry 
            </summary>
        </member>
        <member name="F:imbACE.Core.core.diagnostic.imbConsoleLog.fullTextLine">
            <summary>
            Cela linija loga u String varijanti
            </summary>
        </member>
        <member name="F:imbACE.Core.core.diagnostic.imbConsoleLog.instruction">
            <summary>
            Specijalna log instrukcija -- za thread safe izvrsavanje
            </summary>
        </member>
        <member name="P:imbACE.Core.core.diagnostic.imbConsoleLog.instructionObject">
            <summary>
            Objekat koji je prosledjen radi izvrsenja instrukcije
            </summary>
        </member>
        <member name="T:imbACE.Core.core.diagnostic.imbConsoleLogInstruction">
            <summary>
            Log instrukcija koja se izvrsava u imbConsoleDisplay.xaml.cs 
            </summary>
        </member>
        <member name="F:imbACE.Core.core.diagnostic.imbConsoleLogInstruction.none">
            <summary>
            Nista
            </summary>
        </member>
        <member name="F:imbACE.Core.core.diagnostic.imbConsoleLogInstruction.clearLog">
            <summary>
            Brise do sadasnje logove
            </summary>
        </member>
        <member name="F:imbACE.Core.core.diagnostic.imbConsoleLogInstruction.openDevNotes">
            <summary>
            Otvara DevNotes dijalog
            </summary>
        </member>
        <member name="F:imbACE.Core.core.diagnostic.imbConsoleLogInstruction.toClipboard">
            <summary>
            Postavlja poruku u clipboard
            </summary>
        </member>
        <member name="F:imbACE.Core.core.diagnostic.imbConsoleLogInstruction.openToolEditor">
            <summary>
            Otvara imbUniversalTool editor
            </summary>
        </member>
        <member name="T:imbACE.Core.core.diagnostic.imbStopwatch">
            <summary>
            Stoperica koja vraca intervale od poziva do poziva. If autorun is TRUE it will automatically start upon constructor executed
            </summary>
        </member>
        <member name="M:imbACE.Core.core.diagnostic.imbStopwatch.#ctor(System.String,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:imbACE.Core.core.diagnostic.imbStopwatch"/> class.
            </summary>
            <param name="_message">The optional message that may be used externaly</param>
            <param name="_autorun">if set to <c>true</c> [autorun].</param>
        </member>
        <member name="M:imbACE.Core.core.diagnostic.imbStopwatch.mainStart(System.String)">
            <summary>
            Saopstava poruku vezanu za glavni stop watch
            </summary>
            <param name="_message"></param>
        </member>
        <member name="M:imbACE.Core.core.diagnostic.imbStopwatch.reportToLog(System.Boolean)">
            <summary>
            samostalno pravi log
            </summary>
            <returns></returns>
        </member>
        <member name="M:imbACE.Core.core.diagnostic.imbStopwatch.getIntervalString(System.Boolean)">
            <summary>
            Vraca interval koji je prosao od proslog poziva u Decimal vrednosti 
            </summary>
            <returns>Vreme u sekundama</returns>
        </member>
        <member name="M:imbACE.Core.core.diagnostic.imbStopwatch.getIntervalSecond(System.Boolean)">
            <summary>
            Vraca interval koji je prosao od proslog poziva u Decimal vrednosti 
            </summary>
            <returns>Vreme u sekundama</returns>
        </member>
        <member name="T:imbACE.Core.core.diagnostic.imbSystemInfo">
            <summary>
            Klasa za pristup sistemskim informacijama
            </summary>
        </member>
        <member name="M:imbACE.Core.core.diagnostic.imbSystemInfo.getProcessList(System.String,System.Boolean,System.DateTime,System.Boolean)">
            <summary>
            Vraca listu procesa prema datim uslovima
            </summary>
            <param name="nameFilter"></param>
            <param name="showOnlyNewProcesses"></param>
            <param name="startedSince"></param>
            <returns></returns>
        </member>
        <member name="M:imbACE.Core.core.diagnostic.imbSystemInfo.getMemory">
            <summary>
            Koliko se memorije trenutno korist
            </summary>
            <returns></returns>
        </member>
        <member name="M:imbACE.Core.core.diagnostic.imbSystemInfo.getNumber(System.Int64,System.Int64,System.String)">
            <summary>
            Pretvara prosledjen broj odgovarajuci format
            </summary>
            <param name="input">Broj koji treba da se preformatira</param>
            <param name="factor">Broj sa kojim deli ulaz - za Mb je 100000</param>
            <param name="sufix">Sufix koji treba da se doda na kraju</param>
            <returns>Sredjen prikaz broja</returns>
        </member>
        <member name="T:imbACE.Core.core.diagnostic.imbTimeStampFormat">
            <summary>
            Format za kreiranje vremenskog potpisa
            </summary>
        </member>
        <member name="F:imbACE.Core.core.diagnostic.imbTimeStampFormat.totalSeconds">
            <summary>
            Standard koji koristi YahooAPI
            </summary>
        </member>
        <member name="F:imbACE.Core.core.diagnostic.imbTimeStampFormat.iso8601">
            <summary>
            Standard koji koristi Alexa API. primer> 2016-07-22T14:01:43.357Z
            </summary>
        </member>
        <member name="F:imbACE.Core.core.diagnostic.imbTimeStampFormat.imbBackup">
            <summary>
            Format koji obezbedjuje unikatni fajl name
            </summary>
        </member>
        <member name="F:imbACE.Core.core.diagnostic.imbTimeStampFormat.imbCacheStamp">
            <summary>
            Format koji se koristi za formiranje cache fajla
            sadrzi MMdd
            </summary>
        </member>
        <member name="F:imbACE.Core.core.diagnostic.imbTimeStampFormat.imbExecutionTimeStamp">
            <summary>
            Precizna beleska o vremenu izvrsavanja: yy_MM_dd_HH:mm:ss:ffffff
            </summary>
        </member>
        <member name="F:imbACE.Core.core.diagnostic.imbTimeStampFormat.imbSinceApplicationStart">
            <summary>
            vreme koje je prodeklo od startovanja aplikacije - > HH_mm_ss_ff - filesafe. primer: h0_m0_s11_ms287
            </summary>
        </member>
        <member name="F:imbACE.Core.core.diagnostic.imbTimeStampFormat.imbSinceApplicationStartRough">
            <summary>
            vreme koje je prodeklo od startovanja aplikacije -> manje precizno HHmmss . primer: h0m0s11
            </summary>
        </member>
        <member name="F:imbACE.Core.core.diagnostic.imbTimeStampFormat.imbDatabase">
            <summary>
            Standardni format> MM-dd-yyyy HH:mm
            </summary>
        </member>
        <member name="F:imbACE.Core.core.diagnostic.imbTimeStampFormat.imbDatabaseTableName">
            <summary>
            Format koji sme da se koristi u nazivu tabele : dd_mm_yyyy
            </summary>
        </member>
        <member name="F:imbACE.Core.core.diagnostic.imbTimeStampFormat.imbApplicationStartTime">
            <summary>
            Vreme pokretanja aplikacije
            </summary>
        </member>
        <member name="F:imbACE.Core.core.diagnostic.imbTimeStampFormat.imbExceptionStamp">
            <summary>
            potpis za filename sa exception output-om - da bi bilo lakse za pracenje
            </summary>
        </member>
        <member name="F:imbACE.Core.core.diagnostic.imbTimeStampFormat.none">
            <summary>
            Nema timestampa - vraca prazan string
            </summary>
        </member>
        <member name="T:imbACE.Core.core.diagnostic.systemInfoData">
            <summary>
            Meta data object with system state information
            </summary>
        </member>
        <member name="M:imbACE.Core.core.diagnostic.timeStamp.GenerateTimeStamp(imbACE.Core.core.diagnostic.imbTimeStampFormat)">
            <summary>
            Generate the timestamp for the signature        
            </summary>
            <returns></returns>
        </member>
        <member name="T:imbACE.Core.core.exceptions.aceExceptionInfo">
            <summary>
            Additional information on exception -- used for XML Serialization
            </summary>
            <seealso cref="T:imbACE.Core.core.exceptions.aceExceptionInfoBase" />
        </member>
        <member name="M:imbACE.Core.core.exceptions.aceExceptionInfo.SaveXML(System.String)">
            <summary>
            Saves the XML into specified path or default diagnostic location
            </summary>
            <param name="path">The path.</param>
            <returns>Full filepath of the saved XML or empty string if failed</returns>
        </member>
        <member name="T:imbACE.Core.core.exceptions.aceExceptionInfoBase">
            <summary>
            Data model
            </summary>
            <seealso cref="T:imbACE.Core.core.exceptions.IAceExceptionSerializable" />
        </member>
        <member name="M:imbACE.Core.core.exceptions.aceExceptionInfoBase.GetFilename">
            <summary>
            Gets the filename with .log extension
            </summary>
            <returns></returns>
        </member>
        <member name="T:imbACE.Core.core.exceptions.aceGeneralException">
            <summary>
            General exception in imbACE framework
            </summary>
            <seealso cref="T:System.Exception" />
        </member>
        <member name="M:imbACE.Core.core.exceptions.aceGeneralException.GetSerializable``1">
            <summary>
            Gets the serializable object with exception information
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:imbACE.Core.core.exceptions.aceGeneralException.#ctor(System.String,System.Exception,System.Object,System.String,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:imbACE.Core.core.exceptions.aceGeneralException"/> class.
            </summary>
            <param name="__message">The message.</param>
            <param name="__innerException">The inner exception.</param>
        </member>
        <member name="P:imbACE.Core.core.exceptions.aceGeneralException.title">
            <summary> </summary>
        </member>
        <member name="P:imbACE.Core.core.exceptions.aceGeneralException.info">
            <summary> </summary>
        </member>
        <member name="P:imbACE.Core.core.exceptions.aceGeneralException.stackFrame">
            <summary> </summary>
        </member>
        <member name="P:imbACE.Core.core.exceptions.aceGeneralException.stackTrace">
            <summary> </summary>
        </member>
        <member name="P:imbACE.Core.core.exceptions.aceGeneralException.callInfo">
            <summary> </summary>
        </member>
        <member name="T:imbACE.Core.core.exceptions.aceScienceException">
            <summary>
            Exception about problem with logic, common sense, scientific method and/or ethics
            </summary>
            <seealso cref="T:imbACE.Core.core.exceptions.aceGeneralException" />
        </member>
        <member name="T:imbACE.Core.core.interfaces.IAccessabilityFeatures">
            <summary>
            Za objekte koji imaju podesen KeyShortcut i upozorenje za potvrdu akcije
            </summary>
        </member>
        <member name="T:imbACE.Core.core.interfaces.ICacheSignature">
            <summary>
            Za objekte koji se upisuju u neki Cache registar - koristi se za identifikaciju verzije
            </summary>
        </member>
        <member name="P:imbACE.Core.core.interfaces.ICacheSignature.signature">
            <summary>
            Potpis objekta koji se koristi za prepoznavanje objekta u kes repozitorijumu
            </summary>
        </member>
        <member name="T:imbACE.Core.core.interfaces.IDynamicGraphSource`1">
            <summary>
            Directed Graph source - ima samo subTrees - ne 
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:imbACE.Core.core.interfaces.IDynamicListSource`1.Add(`0)">
            <summary>
            Dodaje novi item u kolekciju
            </summary>
            <param name="__item"></param>
        </member>
        <member name="P:imbACE.Core.core.interfaces.IDynamicSource.dynamicItemSource">
            <summary>
            Pruza enumerator za pristup svim Dynamic itemima
            </summary>
        </member>
        <member name="M:imbACE.Core.core.interfaces.IDynamicSource.Add(System.Object)">
            <summary>
            Dodaje novi item u kolekciju
            </summary>
            <param name="__item"></param>
        </member>
        <member name="E:imbACE.Core.core.interfaces.IDynamicSource.CollectionChanged">
            <summary>
            Javlja da je doslo do promene u kolekciji
            </summary>
        </member>
        <member name="P:imbACE.Core.core.interfaces.IDynamicTreeSource`2.subTrees">
            <summary>
            Pristup pod granama
            </summary>
        </member>
        <member name="T:imbACE.Core.core.interfaces.IDynamicTreeSource">
            <summary>
            Objekat koji moze biti izvor DynamicTree grane u OperationMenu - 
            </summary>
        </member>
        <member name="P:imbACE.Core.core.interfaces.IDynamicTreeSource.subTrees">
            <summary>
            Pristup pod granama
            </summary>
        </member>
        <member name="P:imbACE.Core.core.interfaces.IDynamicListSource.Item(System.String)">
            <summary>
            Direct access to items in dictionary
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="T:imbACE.Core.core.interfaces.IGlobalResource">
            <summary>
            Objekat je predvidjen da bude globalno dostupan - tj. podrzava globalni pristup 
            </summary>
        </member>
        <member name="T:imbACE.Core.core.interfaces.ILogProgressReportInformation">
            <summary>
            Koristi se za progress bar
            </summary>
        </member>
        <member name="P:imbACE.Core.core.interfaces.ILogProgressReportInformation.percentDone">
            <summary>
            U kom procentu je ispunjen zadatak
            </summary>
        </member>
        <member name="T:imbACE.Core.core.interfaces.IPrioritySortable">
            <summary>
            Za objekte koje je moduce sortirati po prioritetu, i relevantnosti
            </summary>
        </member>
        <member name="T:imbACE.Core.core.logSystem">
            <summary>
            Compatibility layer --- for easier integration of several ealier source codes
            </summary>
        </member>
        <member name="M:imbACE.Core.core.logSystem.log(System.String,System.Object[])">
            <summary>
            Avoid this method --- this is a compatibility layer, call <see cref="M:imbACE.Core.core.aceLog.log(System.String,System.Object,System.Boolean)"/> instead. Forwards the call to <see cref="M:imbACE.Core.core.aceLog.log(System.String,System.Object,System.Boolean)"/> and ignores <c>logResources</c>
            </summary>
            <param name="message">The message to log</param>
            <param name="logResources">These are ignored ---</param>
        </member>
        <member name="T:imbACE.Core.core.StaHelper">
            <summary>
            Single Thread Helper. Initial source code author: Paul Alexander,  https://stackoverflow.com/users/76456/paul-alexander
            </summary>
            <remarks>
            StackOverFlow topic: https://stackoverflow.com/questions/899350/how-do-i-copy-the-contents-of-a-string-to-the-clipboard-in-c
            </remarks>
        </member>
        <member name="P:imbACE.Core.core.workload.workloadControlerRecord.valueChange">
            <summary>
            how much the value should be changed
            </summary>
            <value>
            The value change.
            </value>
        </member>
        <member name="P:imbACE.Core.core.workload.workloadControlerRecord.decision">
            <summary>
            what was decided
            </summary>
            <value>
            The decision.
            </value>
        </member>
        <member name="F:imbACE.Core.core.workload.workloadDecision.pause">
            <summary>
            The pause: puts everything on 0 until next evaluation
            </summary>
        </member>
        <member name="T:imbACE.Core.data.aceSubEnum">
            <summary>
            Enumerator that evaluates the <see cref="P:imbACE.Core.data.aceSubEnum.path"/> against <see cref="P:System.Collections.IEnumerator.Current"/> object
            </summary>
            <seealso cref="T:System.Collections.IEnumerator" />
        </member>
        <member name="P:imbACE.Core.data.aceSubEnum.targetPi">
            <summary> </summary>
        </member>
        <member name="P:imbACE.Core.data.aceSubEnum.sourceType">
            <summary> </summary>
        </member>
        <member name="P:imbACE.Core.data.aceSubEnum.source">
            <summary> </summary>
        </member>
        <member name="P:imbACE.Core.data.aceSubEnum.sourceEnumerator">
            <summary> </summary>
        </member>
        <member name="P:imbACE.Core.data.aceSubEnum.path">
            <summary> </summary>
        </member>
        <member name="P:imbACE.Core.data.aceSubEnum.System#Collections#IEnumerator#Current">
            <summary>
            Returns the value extracted from the <see cref="P:imbACE.Core.data.aceSubEnum.sourceEnumerator"/>
            </summary>
        </member>
        <member name="M:imbACE.Core.data.enumerableExtensions.Get(System.Collections.IEnumerable,System.String)">
            <summary>
            Gets <see cref="T:imbACE.Core.data.aceSubEnum"/> enumerator that iterates trough values found on the path
            </summary>
            <param name="source">The source.</param>
            <param name="path">The path.</param>
            <returns></returns>
            <exception cref="T:imbACE.Core.core.exceptions.aceGeneralException">The path can't be empty - null - null - enumerableExtensions</exception>
        </member>
        <member name="T:imbACE.Core.data.mysql.aceMySqlTools">
            <summary>
            Simple to use tools to import and export MySql server data data TODO: Export to MySQL server
            </summary>
        </member>
        <member name="P:imbACE.Core.data.mysql.aceMySqlTools.commonTarget">
            <summary>
            Default target used by the system
            </summary>
            <value>
            The common target.
            </value>
        </member>
        <member name="M:imbACE.Core.data.mysql.aceMySqlTools.getDataTable(System.String,imbACE.Core.data.mysql.dataBaseTarget)">
            <summary>
            Gets complete table from specified target, if target is null it will use <see cref="P:imbACE.Core.data.mysql.aceMySqlTools.commonTarget"/>
            </summary>
            <param name="dataTableName">Name of the data table.</param>
            <param name="target">The target.</param>
            <returns></returns>
        </member>
        <member name="M:imbACE.Core.data.mysql.aceMySqlTools.getConnection(imbACE.Core.data.mysql.dataBaseTarget,System.Boolean)">
            <summary>
            Create and open a <see cref="T:MySql.Data.MySqlClient.MySqlConnection"/>
            </summary>
            <param name="target">The target.</param>
            <param name="open">if set to <c>true</c> [open].</param>
            <returns></returns>
        </member>
        <member name="M:imbACE.Core.data.mysql.aceMySqlTools.getConnectionString(imbACE.Core.data.mysql.dataBaseTarget)">
            <summary>
            Gets the connection string.
            </summary>
            <param name="target">The target.</param>
            <returns></returns>
        </member>
        <member name="T:imbACE.Core.data.mysql.dataBaseTarget">
            <summary>
            Settings for database server connection
            </summary>
        </member>
        <member name="M:imbACE.Core.data.mysql.dataBaseTarget.#ctor">
            <summary>
            Default constructor for XML Serialization
            </summary>
        </member>
        <member name="T:imbACE.Core.data.measurement.performanceBase`1">
            <summary>
            performance measurement base class
            </summary>
        </member>
        <member name="P:imbACE.Core.data.measurement.performanceBase`1.name">
            <summary>
            
            </summary>
        </member>
        <member name="P:imbACE.Core.data.measurement.performanceBase`1.secondsBetweenTakes">
            <summary>
            
            </summary>
        </member>
        <member name="M:imbACE.Core.data.measurement.performanceBase`1.checkTake">
            <summary>
            Makes take() if interval passed
            </summary>
        </member>
        <member name="M:imbACE.Core.data.measurement.performanceBase`1.GetTrend(System.Func{`0,System.Double},imbSCI.DataComplex.trends.measureTrendTaker)">
            <summary>
            Gets the trend.
            </summary>
            <param name="selector">The selector.</param>
            <param name="trendTaker">The trend taker.</param>
            <returns></returns>
        </member>
        <member name="M:imbACE.Core.data.measurement.performanceBase`1.GetTrend(imbSCI.DataComplex.trends.measureTrendTaker{`0})">
            <summary>
            Gets the trend.
            </summary>
            <param name="typedTaker">The typed taker.</param>
            <returns></returns>
        </member>
        <member name="M:imbACE.Core.data.measurement.performanceBase`1.take">
            <summary>
            Procedure that creates new take. Thread safe
            </summary>
        </member>
        <member name="P:imbACE.Core.data.measurement.performanceBase`1.lastTake">
            <summary> </summary>
        </member>
        <member name="M:imbACE.Core.data.measurement.performanceBase`1.GetTimeSpan">
            <summary>
            Gets the time span covered by this performance collection
            </summary>
            <returns></returns>
        </member>
        <member name="M:imbACE.Core.data.measurement.performanceBase`1.GetAverage">
            <summary>
            Gets the average of the main reading
            </summary>
            <returns></returns>
        </member>
        <member name="M:imbACE.Core.data.measurement.performanceBase`1.CountTakes">
            <summary>
            Number of takes
            </summary>
            <returns></returns>
        </member>
        <member name="P:imbACE.Core.data.measurement.performanceBase`1.takes">
            <summary> </summary>
        </member>
        <member name="M:imbACE.Core.data.measurement.performanceBase`1.GetDataTableBase(System.String)">
            <summary>
            Gets the data table with <see cref="T:imbSCI.DataComplex.tables.objectTable`1"/>
            </summary>
            <returns></returns>
        </member>
        <member name="M:imbACE.Core.data.measurement.performanceBase`1.LoadDataTable(System.Data.DataTable,System.Boolean)">
            <summary>
            Loads the data table.
            </summary>
            <param name="input">The input.</param>
            <param name="removeCurrent">if set to <c>true</c> [remove current].</param>
        </member>
        <member name="M:imbACE.Core.data.measurement.performanceBase`1.GetDataTable(System.String)">
            <summary>
            Gets data table with all readings
            </summary>
            <param name="prefix">The prefix.</param>
            <returns></returns>
        </member>
        <member name="P:imbACE.Core.data.measurement.performanceTake.samplingTime">
            <summary>
            Time of take creation
            </summary>
        </member>
        <member name="P:imbACE.Core.data.measurement.performanceTake.PerMinuteFactor">
            <summary> Multiplier to convert reading into n per minute value. mK = 60 / secondsSinceLastTake </summary>
        </member>
        <member name="P:imbACE.Core.data.measurement.performanceTake.secondsSinceLastTake">
            <summary>
            
            </summary>
        </member>
        <member name="P:imbACE.Core.data.measurement.performanceTake.reading">
            <summary>
            Primary reading value
            </summary>
        </member>
        <member name="F:imbACE.Core.enums.platform.platformColorName.Black">
            <summary>
            The color black.
            </summary>
        </member>
        <member name="F:imbACE.Core.enums.platform.platformColorName.DarkBlue">
            <summary>
            The color dark blue.
            </summary>
        </member>
        <member name="F:imbACE.Core.enums.platform.platformColorName.DarkGreen">
            <summary>
            The color dark green.
            </summary>
        </member>
        <member name="F:imbACE.Core.enums.platform.platformColorName.DarkCyan">
            <summary>
            The color dark cyan (dark blue-green).
            </summary>
        </member>
        <member name="F:imbACE.Core.enums.platform.platformColorName.DarkRed">
            <summary>
            The color dark red.
            </summary>
        </member>
        <member name="F:imbACE.Core.enums.platform.platformColorName.DarkMagenta">
            <summary>
            The color dark magenta (dark purplish-red).
            </summary>
        </member>
        <member name="F:imbACE.Core.enums.platform.platformColorName.DarkYellow">
            <summary>
            The color dark yellow (ochre).
            </summary>
        </member>
        <member name="F:imbACE.Core.enums.platform.platformColorName.Gray">
            <summary>
            The color gray.
            </summary>
        </member>
        <member name="F:imbACE.Core.enums.platform.platformColorName.DarkGray">
            <summary>
            The color dark gray.
            </summary>
        </member>
        <member name="F:imbACE.Core.enums.platform.platformColorName.Blue">
            <summary>
            The color blue.
            </summary>
        </member>
        <member name="F:imbACE.Core.enums.platform.platformColorName.Green">
            <summary>
            The color green.
            </summary>
        </member>
        <member name="F:imbACE.Core.enums.platform.platformColorName.Cyan">
            <summary>
            The color cyan (blue-green).
            </summary>
        </member>
        <member name="F:imbACE.Core.enums.platform.platformColorName.Red">
            <summary>
            The color red.
            </summary>
        </member>
        <member name="F:imbACE.Core.enums.platform.platformColorName.Magenta">
            <summary>
            The color magenta (purplish-red).
            </summary>
        </member>
        <member name="F:imbACE.Core.enums.platform.platformColorName.Yellow">
            <summary>
            The color yellow.
            </summary>
        </member>
        <member name="F:imbACE.Core.enums.platform.platformColorName.White">
            <summary>
            The color white.
            </summary>
        </member>
        <member name="F:imbACE.Core.enums.platform.platformColorRole.contentHeading">
            <summary>
            
            </summary>
        </member>
        <member name="T:imbACE.Core.enums.platform.userInterfaceType">
            <summary>
            Defines the type of User Interface platform
            </summary>
        </member>
        <member name="F:imbACE.Core.enums.platform.userInterfaceType.unknown">
            <summary>
            The unknown: not specified
            </summary>
        </member>
        <member name="F:imbACE.Core.enums.platform.userInterfaceType.terminal">
            <summary>
            The terminal: command-prompt kind of interface
            </summary>
        </member>
        <member name="F:imbACE.Core.enums.platform.userInterfaceType.textBlocksTUI">
            <summary>
            The text blocks TUI: ACE Text User Interface called TextBlocks
            </summary>
        </member>
        <member name="F:imbACE.Core.enums.platform.userInterfaceType.xamlTUI">
            <summary>
            The xaml tui: Text User Interface based on open source project: CommandConsole
            </summary>
        </member>
        <member name="F:imbACE.Core.enums.platform.userInterfaceType.selfServedWebUI">
            <summary>
            The application it self is a local web server that renders UI trough HTML and Web Browser
            </summary>
        </member>
        <member name="F:imbACE.Core.enums.platform.userInterfaceType.externalWebUI">
            <summary>
            Web UI based on external web server
            </summary>
        </member>
        <member name="F:imbACE.Core.enums.platform.userInterfaceType.xamlGUI">
            <summary>
            XAML based GUI
            </summary>
        </member>
        <member name="T:imbACE.Core.enums.platform.windowSize">
            <summary>
            Enumeration 
            </summary>
        </member>
        <member name="F:imbACE.Core.enums.platform.windowSize.defaultSize">
            <summary>
            The default size: 85 x 43, equal to <see cref="F:imbSCI.Core.reporting.zone.cursorZoneSpatialPreset.console"/>
            </summary>
        </member>
        <member name="F:imbACE.Core.enums.platform.windowSize.doubleSize">
            <summary>
            The double size: double from <see cref="F:imbACE.Core.enums.platform.windowSize.defaultSize"/>
            </summary>
        </member>
        <member name="F:imbACE.Core.enums.platform.windowSize.fullscreenSize">
            <summary>
            The fullscreen size: maximum
            </summary>
        </member>
        <member name="T:imbACE.Core.enums.render.screenOptionFlag">
            <summary>
            Flagovi - screenOptionFlag
            </summary>
        </member>
        <member name="F:imbACE.Core.enums.render.screenOptionFlag.Ok">
            <summary>
            Izvrsice ucitavanje samo ako isti URL / komanda nije poslednja koja je izvrsena
            </summary>
        </member>
        <member name="T:imbACE.Core.enums.aceCommonDefaultPath">
            <summary>
            How it takes default path (partial implementation)
            </summary>
        </member>
        <member name="T:imbACE.Core.enums.contentStructureType">
            <summary>
            Content structure - semantic annotation to the element of decomposed content
            </summary>
        </member>
        <member name="T:imbACE.Core.enums.defaultSplitingLevel">
            <summary>
            Content decomposition enumeration designating how the flat textual content should be decomposed
            </summary>
        </member>
        <member name="T:imbACE.Core.enums.outputFolder">
            <summary>
            Izlazni folder unutar direktorijuma sa projektom
            </summary>
        </member>
        <member name="F:imbACE.Core.enums.outputFolder.temp">
            <summary>
            Privremeni fajlovi
            </summary>
        </member>
        <member name="F:imbACE.Core.enums.outputFolder.projects">
            <summary>
            Projekti
            </summary>
        </member>
        <member name="F:imbACE.Core.enums.outputFolder.workspaces">
            <summary>
            workspaces
            </summary>
        </member>
        <member name="F:imbACE.Core.enums.outputFolder.presets">
            <summary>
            Folder sa file presetima
            </summary>
        </member>
        <member name="F:imbACE.Core.enums.outputFolder.system">
            <summary>
            Sistemski cache
            </summary>
        </member>
        <member name="F:imbACE.Core.enums.outputFolder.backup">
            <summary>
            Koristi se za backup fajlove
            </summary>
        </member>
        <member name="F:imbACE.Core.enums.outputFolder.resources">
            <summary>
            Koristi se za dodatne resurse
            </summary>
        </member>
        <member name="F:imbACE.Core.enums.typedParamDeclarationType.nameDoubleDotType">
            <summary>
            Parametar deklarisan: paramname:typename --> name:String --- koristi se ; kada se navodi u nizu> count:Int32;name:String;
            </summary>
        </member>
        <member name="F:imbACE.Core.enums.typedParamDeclarationType.cmdOperationBracketsStyle">
            <summary>
            -n[Job name]
            </summary>
        </member>
        <member name="F:imbACE.Core.enums.typedParamDeclarationType.cmdOperationNoBracketsStyle">
            <summary>
            -n job:String
            </summary>
        </member>
        <member name="T:imbACE.Core.events.aceEventGeneralArgs">
            <summary>
            General imbACE Event Arguments
            </summary>
            <remarks>
            <para>Try to avoid any automatic and assumption-based value attribution to the Event Arguments information</para>
            <para>Set only data that are: </para>
            <list type="Bullet">
                <listheader>
                    <term>Guidelines</term>
                </listheader>
                <item>
                    <term>In case of exception or crash: populate <see cref="P:imbACE.Core.events.aceEventGeneralArgs.Properties"/> with any useful Exception and/or contextual information for easier debug</term>
                </item>
                <item>
                    <term>Set <see cref="P:imbACE.Core.events.aceEventGeneralArgs.type"/> and/or <see cref="P:imbACE.Core.events.aceEventGeneralArgs.Origin"/> only if it can be useful for event interpretation</term>
                </item>
                <item>
                    <term>Implement <see cref="P:imbACE.Core.events.aceEventGeneralArgs.isCanceled"/> in case the event is yet to happen (e.g. <see cref="!:aceEventType.closing"/>, <see cref="!:aceEventType.saving"/>)</term>
                </item>
            </list>
            <example>
                <para>Recommended application of the imbACE EventGeneralArgs</para>
                <code>
                // Event receiver
                public class anAceObjectListener {
                    
                    public anAceObject createObject() {
                
                        var a = new anAceObject();
                        a.EventOpDone += c_operation;
                        return a;
                    }
            
                    public void c_operationDone(object sender, aceEventGeneralArgs e)
                    {
                        // code that reacts to the event
                        Environment.Exit(0);
                    }
                    
                }
            
                // Event sender
                public class anAceObject {
                
                    protected String operationName {get;set;} = "doSomething";
            
                    // Event handler
                    public event EventHandler&lt;aceEventGeneralArgs&gt; EventOpDone;
                    
                    // 
                    protected virtual void OnOperationDone(aceEventGeneralArgs e) {
                        
                        e.Properties["OperationName"]=operationName;
                        
                        if (e.type == aceEventType.unknown) e.type = aceEventType.finished;
            
                        EventOpDone(this, e);
                    }
            
                    // "Closed" scenario - when we know exactly what happen
                    protected virtual void OnStarted() {
                        
                        var e = aceEventGeneralArgs(aceEventType.started);
                        EventOpDone(this, e); 
                        
                    }
            
                }
                </code>
            </example>
            </remarks>
        </member>
        <member name="P:imbACE.Core.events.aceEventGeneralArgs.isCanceled">
            <summary> if true, it will tell to the event handling party to try canceling / preventing, if event is preventable </summary>
        </member>
        <member name="P:imbACE.Core.events.aceEventGeneralArgs.Message">
            <summary> Textual message attached to the event </summary>
        </member>
        <member name="P:imbACE.Core.events.aceEventGeneralArgs.RelatedObject">
            <summary> An object that is relevant to the event (not sender) - this property is not serialized </summary>
        </member>
        <member name="P:imbACE.Core.events.aceEventGeneralArgs.Path">
            <summary> Filesystem, network or application resources path - pointing to the position of event origin </summary>
        </member>
        <member name="P:imbACE.Core.events.aceEventGeneralArgs.type">
            <summary> Type of the event </summary>
        </member>
        <member name="P:imbACE.Core.events.aceEventGeneralArgs.Origin">
            <summary> Indication on the event origin (optional)  </summary>
        </member>
        <member name="P:imbACE.Core.events.aceEventGeneralArgs.Properties">
            <summary> Additional meta data on the event </summary>
        </member>
        <member name="F:imbACE.Core.events.aceEventOrigin.none">
            <summary>
            The none: there is no origin set
            </summary>
        </member>
        <member name="F:imbACE.Core.events.aceEventOrigin.unknown">
            <summary>
            The unknown: unknown origin of the event
            </summary>
        </member>
        <member name="F:imbACE.Core.events.aceEventOrigin.Framework">
            <summary>
            The framework: imbACI.Core and lower in the architecture
            </summary>
        </member>
        <member name="F:imbACE.Core.events.aceEventOrigin.Application">
            <summary>
            The application: imbACE.Application had a major event
            </summary>
        </member>
        <member name="F:imbACE.Core.events.aceEventOrigin.Settings">
            <summary>
            The settings: settings data object had an event
            </summary>
        </member>
        <member name="F:imbACE.Core.events.aceEventOrigin.User">
            <summary>
            The user: user done something
            </summary>
        </member>
        <member name="F:imbACE.Core.events.aceEventOrigin.Remote">
            <summary>
            The remote: remote server or client done something
            </summary>
        </member>
        <member name="F:imbACE.Core.events.aceEventOrigin.Console">
            <summary>
            The console: command console had its own specific event
            </summary>
        </member>
        <member name="F:imbACE.Core.events.aceEventOrigin.Plugin">
            <summary>
            The plugin: a plugin had event
            </summary>
        </member>
        <member name="F:imbACE.Core.events.aceEventOrigin.Script">
            <summary>
            The script: ACE or S# script had some event
            </summary>
        </member>
        <member name="F:imbACE.Core.events.aceEventOrigin.Project">
            <summary>
            The project: imbACE.Application project had an event
            </summary>
        </member>
        <member name="F:imbACE.Core.events.aceEventOrigin.Component">
            <summary>
            The component: a component had an event
            </summary>
        </member>
        <member name="F:imbACE.Core.events.aceEventOrigin.DataObject">
            <summary>
            The data object: data structure, collection and such kind of staff
            </summary>
        </member>
        <member name="F:imbACE.Core.events.aceEventOrigin.WorkObject">
            <summary>
            The work object: active/procedural/algorithm - component/object had an event
            </summary>
        </member>
        <member name="F:imbACE.Core.events.aceEventOrigin.Filesystem">
            <summary>
            The filesystem: filesystem related event
            </summary>
        </member>
        <member name="F:imbACE.Core.events.aceEventOrigin.Ataman">
            <summary>
            The ataman: ataman reporting
            </summary>
        </member>
        <member name="F:imbACE.Core.events.aceEventOrigin.Task">
            <summary>
            The task: a job task had event
            </summary>
        </member>
        <member name="F:imbACE.Core.events.aceEventOrigin.Job">
            <summary>
            The job: collection of tasks had an event
            </summary>
        </member>
        <member name="F:imbACE.Core.events.aceEventOrigin.WebRequest">
            <summary>
            The web request: web request had an event
            </summary>
        </member>
        <member name="F:imbACE.Core.events.aceEventOrigin.Cache">
            <summary>
            The cache: cache system had event
            </summary>
        </member>
        <member name="F:imbACE.Core.events.aceEventOrigin.OperationSystem">
            <summary>
            The operation system: operation system had event
            </summary>
        </member>
        <member name="F:imbACE.Core.events.aceEventOrigin.Client">
            <summary>
            The client: ACE client had an event
            </summary>
        </member>
        <member name="F:imbACE.Core.events.aceEventOrigin.Server">
            <summary>
            The server: ACE server had an event
            </summary>
        </member>
        <member name="F:imbACE.Core.events.aceEventOrigin.Criterion">
            <summary>
            The criterion: some criterion is just met
            </summary>
        </member>
        <member name="F:imbACE.Core.events.aceEventOrigin.Scheduler">
            <summary>
            The scheduler: scheduler triggered an event
            </summary>
        </member>
        <member name="F:imbACE.Core.events.aceEventOrigin.Iteration">
            <summary>
            The iteration: inside a iterative process had event
            </summary>
        </member>
        <member name="T:imbACE.Core.events.aceEventType">
            <summary>
            General descriptive enumeration for aceEvents (imbACE.Application Framework low-level layer at imbACE.Core)
            </summary>
        </member>
        <member name="F:imbACE.Core.events.aceEventType.none">
            <summary>
            The none: nothing happened
            </summary>
        </member>
        <member name="F:imbACE.Core.events.aceEventType.unknown">
            <summary>
            The unknown: something happen but who knows what and to whom
            </summary>
        </member>
        <member name="F:imbACE.Core.events.aceEventType.Universal">
            <summary>
            The universal: universal event, interpreted outside this library scope
            </summary>
        </member>
        <member name="F:imbACE.Core.events.aceEventType.Loaded">
            <summary>
            The loaded: something is just loaded
            </summary>
        </member>
        <member name="F:imbACE.Core.events.aceEventType.Updated">
            <summary>
            The updated: something was just updated
            </summary>
        </member>
        <member name="F:imbACE.Core.events.aceEventType.Deployed">
            <summary>
            The deployed: something has just deployed (installed to parent object or instance created
            </summary>
        </member>
        <member name="F:imbACE.Core.events.aceEventType.Created">
            <summary>
            The created: something was just created
            </summary>
        </member>
        <member name="F:imbACE.Core.events.aceEventType.Ready">
            <summary>
            The ready: something is ready for next step in the process or to be used by user
            </summary>
        </member>
        <member name="F:imbACE.Core.events.aceEventType.Saving">
            <summary>
            The saving: something is preparing to be saved
            </summary>
        </member>
        <member name="F:imbACE.Core.events.aceEventType.Error">
            <summary>
            The error: something had non-critical error
            </summary>
        </member>
        <member name="F:imbACE.Core.events.aceEventType.Exception">
            <summary>
            The exception: something had universaly handled exception
            </summary>
        </member>
        <member name="F:imbACE.Core.events.aceEventType.Crashed">
            <summary>
            The crashed: a process or object construction has crashed beyond usability
            </summary>
        </member>
        <member name="F:imbACE.Core.events.aceEventType.Failed">
            <summary>
            The failed: something failed in task it has received to do
            </summary>
        </member>
        <member name="F:imbACE.Core.events.aceEventType.Started">
            <summary>
            The started: something just started to perform given task
            </summary>
        </member>
        <member name="F:imbACE.Core.events.aceEventType.Paused">
            <summary>
            The paused: something has been temporary paused in task that was given
            </summary>
        </member>
        <member name="F:imbACE.Core.events.aceEventType.Finished">
            <summary>
            The finished: something just finished with earlier given task
            </summary>
        </member>
        <member name="F:imbACE.Core.events.aceEventType.Closing">
            <summary>
            The closing: something is about to close/shutdown
            </summary>
        </member>
        <member name="F:imbACE.Core.events.aceEventType.Closed">
            <summary>
            The closed: something just closed/shotdown
            </summary>
        </member>
        <member name="T:imbACE.Core.events.aceEventArgsBase">
            <summary>
            2013c: Osnovna klasa Event Args-ova koji se koriste u imbVeles sistemu
            </summary>
        </member>
        <member name="P:imbACE.Core.events.aceEventArgsBase.Ex">
            <summary>
            Beleska o exception
            </summary>
        </member>
        <member name="P:imbACE.Core.events.aceEventArgsBase.isError">
            <summary>
            Da li je doslo do greske u izvrsavanju? - ovo i nije bas pouzdano
            </summary>
        </member>
        <member name="P:imbACE.Core.events.aceEventArgsBase.message">
            <summary>
            Tekstualna poruka koja opisuje dogadjaj
            </summary>
        </member>
        <member name="T:imbACE.Core.imbACECoreConfig">
            <summary>
            General configuration object for domain of <see cref="N:imbACE.Core"/>
            </summary>
        </member>
        <member name="M:imbACE.Core.imbACECoreConfig.#ctor">
            <summary>
            Constructor without arguments is obligatory for XML serialization
            </summary>
        </member>
        <member name="P:imbACE.Core.imbACECoreConfig.isDefaultReplaced">
            <summary>
            Gets or sets a value indicating whether, since program start, <see cref="P:imbACE.Core.imbACECoreConfig.settings"/> were replaced with another instance, i.e. loaded externally
            </summary>
            <value>
              <c>true</c> if this instance is default replaced; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:imbACE.Core.imbACECoreConfig.settings">
            <summary>
            General configuration instance for domain of <see cref="N:imbACE.Core"/>
            </summary>
            <value>
            Global settings
            </value>
        </member>
        <member name="P:imbACE.Core.imbACECoreConfig.doAllowOSDialogs">
            <summary> If true it will allow calling OS GUI dialogs </summary>
        </member>
        <member name="P:imbACE.Core.imbACECoreConfig.doDisplayMainLog">
            <summary> If true it send the main log to the screen </summary>
        </member>
        <member name="P:imbACE.Core.imbACECoreConfig.doConsoleColorsByMarkupParshing">
            <summary> If true it will use console text markup parsing to color stressed parts of the text </summary>
        </member>
        <member name="P:imbACE.Core.imbACECoreConfig.doConsoleColorsCyrcleSelector">
            <summary> If true it will assign different color to each ILogBuilder registered to output </summary>
        </member>
        <member name="T:imbACE.Core.interfaces.IGetToSetFromString">
            <summary>
            Data description classes having serialization capability over customizable declaration syntax
            </summary>
        </member>
        <member name="M:imbACE.Core.interfaces.IGetToSetFromString.getToString(imbACE.Core.enums.typedParamDeclarationType)">
            <summary>
            Makes string declaration of the param;
            </summary>
            <param name="declaration">Declaration format</param>
        </member>
        <member name="M:imbACE.Core.interfaces.IGetToSetFromString.setFromString(System.String,imbACE.Core.enums.typedParamDeclarationType)">
            <summary>
            Declares name and value type (class) from string declaration, formated as defined by the declaration
            </summary>
            <param name="input">String declaration of the param. Example: "numericParam:Int32;textMessage:String"</param>
            <param name="declaration">What format is used for string representation</param>
        </member>
        <member name="T:imbACE.Core.interfaces.IDisplayMenuInfo">
            <summary>
            Objekat koji se prikazuje u meniju
            </summary>
        </member>
        <member name="T:imbACE.Core.interfaces.ILearn">
            <summary>
            Has ability to copy values of <c>source</c> properties. 
            </summary>
            <remarks>
            Unlike <c>IClonable</c> it keep all references to this object untouched.
            </remarks>
        </member>
        <member name="M:imbACE.Core.interfaces.ILearn.Learn(System.Object)">
            <summary>
            In default implementation learns all  public properties from the specified source.
            </summary>
            <typeparam name="T">source object to learn from. It's exception safer to use the source object of the same or derived class.</typeparam>
            <param name="source">The source.</param>
            <remarks>Uses <see cref="!:imbTypeObjectOperations.setObjectBySource(object, object, string[])"/> for default implementation. </remarks>
        </member>
        <member name="T:imbACE.Core.interfaces.ILogReportInformation">
            <summary>
            Objekat koji ima i ceo report sa sobom
            </summary>
        </member>
        <member name="T:imbACE.Core.interfaces.ISqlEntitySupported">
            <summary>
            Podrzan rad sa SqlEntity frameworkom
            </summary>
        </member>
        <member name="T:imbACE.Core.interfaces.primitives.aceStringBuilder">
            <summary>
            StringBuilder with string return (2017:ne koristi se:samo ideja)
            </summary>
        </member>
        <member name="T:imbACE.Core.interfaces.primitives.ILimitedValueRange">
            <summary>
            Bilo koji tip koji ima ogranicen raspon vrednosti -- ovo je pitanje zbog interfejsa
            </summary>
        </member>
        <member name="M:imbACE.Core.interfaces.primitives.imbNLPbasic.getRoot(System.Collections.Generic.List{System.String})">
            <summary>
            vraca zajednicki koren reci - jos nije implementirano
            </summary>
        </member>
        <member name="M:imbACE.Core.interfaces.primitives.imbNLPbasic.tokenFilter(System.String[],imbACE.Core.interfaces.primitives.imbNLPsettings)">
            <summary>
            Filtrira tokene prema zadatim pode�avanjima
            </summary>
            <param name="output"></param>
            <param name="_settings"></param>
            <returns></returns>
        </member>
        <member name="M:imbACE.Core.interfaces.primitives.imbNLPbasic.tokenFilter(System.String[],System.Boolean,System.Int32,System.Boolean,System.Boolean)">
            <summary>
            Mo�e da se koristi za bilo koji niz stringova
            </summary>
            <param name="output"></param>
            <param name="trimOutput"></param>
            <param name="tokenLenLimit"></param>
            <param name="onlyUnique"></param>
            <param name="toLoweCase"></param>
            <returns></returns>
        </member>
        <member name="M:imbACE.Core.interfaces.primitives.imbNLPbasic.split(System.String,imbACE.Core.enums.defaultSplitingLevel)">
            <summary>
            Univerzalni osnovni split mehanizam
            </summary>
            <param name="input"></param>
            <param name="splitLevel"></param>
            <returns></returns>
        </member>
        <member name="M:imbACE.Core.interfaces.primitives.imbNLPbasic.unsplit(System.String[],imbACE.Core.enums.defaultSplitingLevel)">
            <summary>
            Univerzalni osnovni split mehanizam
            </summary>
            <param name="input"></param>
            <param name="splitLevel"></param>
            <returns></returns>
        </member>
        <member name="M:imbACE.Core.interfaces.primitives.imbNLPbasic.tokenize(System.String)">
            <summary>
            2013s> osnovni tokenize mehanizam
            </summary>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:imbACE.Core.interfaces.primitives.imbNLPbasic.sentencenize(System.String)">
            <summary>
            2013a> osnovni sentencenize mehanizam
            </summary>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="P:imbACE.Core.interfaces.primitives.imbNLPbasic.tokenSeparators">
            <summary>
             svi karakteri koji mogu biti token separatori
            </summary>
        </member>
        <member name="P:imbACE.Core.interfaces.primitives.imbNLPbasic.sentenceSeparators">
            <summary>
             svi karakteri koji mogu biti token separatori
            </summary>
        </member>
        <member name="T:imbACE.Core.interfaces.primitives.imbNLPsettings">
            <summary>
            Podeševanja imbNLP filtera
            </summary>
        </member>
        <member name="P:imbACE.Core.interfaces.primitives.imbNLPsettings.splitLevel">
            <summary>
            Podrazumevani split nivo
            </summary>
        </member>
        <member name="P:imbACE.Core.interfaces.primitives.imbNLPsettings.minLength">
            <summary>
            Minimalna sirina tokena - ako je 0 onda se ne primenjuje
            </summary>
        </member>
        <member name="P:imbACE.Core.interfaces.primitives.imbNLPsettings.toLowerCase">
            <summary>
            Svi tokeni da idu u lowerCase
            </summary>
        </member>
        <member name="P:imbACE.Core.interfaces.primitives.imbNLPsettings.trimTokens">
            <summary>
            Da trimuje space oko tokena
            </summary>
        </member>
        <member name="P:imbACE.Core.interfaces.primitives.imbNLPsettings.onlyUnique">
            <summary>
            Samo jedinstveni tokeni
            </summary>
        </member>
        <member name="T:imbACE.Core.interfaces.primitives.objectWithNameAndDescription">
            <summary>
            Dummy object holding two basic information entryies
            </summary>
            <seealso cref="T:imbSCI.Data.interfaces.IObjectWithNameAndDescription" />
        </member>
        <member name="M:imbACE.Core.interfaces.primitives.objectWithNameAndDescription.#ctor(System.Data.DataTable)">
            <summary>
            Initializes a new instance of the <see cref="T:imbACE.Core.interfaces.primitives.objectWithNameAndDescription"/> class.
            </summary>
            <param name="table">The table to learn <c>name</c> and <c>desciption</c> from</param>
        </member>
        <member name="M:imbACE.Core.interfaces.primitives.objectWithNameAndDescription.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:imbACE.Core.interfaces.primitives.objectWithNameAndDescription"/> class.
            </summary>
            <param name="__name">The name.</param>
            <param name="__description">The description.</param>
        </member>
        <member name="P:imbACE.Core.interfaces.primitives.objectWithNameAndDescription.name">
            <summary>
            Name for this instance
            </summary>
        </member>
        <member name="P:imbACE.Core.interfaces.primitives.objectWithNameAndDescription.description">
            <summary>
            Human-readable description of object instance
            </summary>
        </member>
        <member name="T:imbACE.Core.extensions.io.externalToolExtensions">
            <summary>
            
            </summary>
        </member>
        <member name="P:imbACE.Core.extensions.io.externalToolExtensions.externalToolsPath">
            <summary>
            External tool vs path collection
            </summary>
        </member>
        <member name="F:imbACE.Core.extensions.io.externalToolExtensions.activeTools">
            <summary>
            The active tools
            </summary>
        </member>
        <member name="M:imbACE.Core.extensions.io.externalToolExtensions.runProcess(System.String,System.String,System.Boolean,System.String)">
            <summary>
            Pokrece fajl/aplikaciju
            </summary>
            <param name="_path"></param>
            <param name="_lineArguments"></param>
        </member>
        <member name="M:imbACE.Core.extensions.io.externalToolExtensions.run(System.IO.FileInfo,imbSCI.Data.enums.externalTool)">
            <summary>
            Opens file specified with an <see cref="T:imbSCI.Data.enums.externalTool"/> 
            </summary>
            <param name="fi">The fi.</param>
            <param name="whatApplication">The what application.</param>
            <returns></returns>
        </member>
        <member name="M:imbACE.Core.extensions.io.externalToolExtensions.run(imbSCI.Data.enums.externalTool,System.String)">
            <summary>
            Pokrece eksterni alat i u njemu otvara prosledjenu putanju
            </summary>
            <param name="filePathOrUrl"></param>
            <param name="whatApplication"></param>
        </member>
        <member name="M:imbACE.Core.extensions.io.globalResourceManager.getContentFileToString(System.String)">
            <summary>
            Loads content file to string
            </summary>
            <param name="pathToContent"></param>
            <returns></returns>
        </member>
        <member name="T:imbACE.Core.NamespaceDoc">
            <summary>
            <para>Set of basic classes, DOMs and APIs shared by various ACE projects.</para>
            <para>Universal Source code DOM <see cref="!:imbACE.Core.data.code"/> and declaration DOM <see cref="!:imbACE.Core.data.codeSyntax"/>  ....</para>
            </summary>
            <summary>
            <para>Set of basic classes, DOMs and APIs shared by various ACE projects.</para>
            <para>Universal Source code DOM <see cref="!:imbACE.Core.data.code"/> and declaration DOM <see cref="!:imbACE.Core.data.codeSyntax"/>  ....</para>
            </summary>
        </member>
        <member name="T:imbACE.Core.operations.aceMenuItemAttribute">
            <summary>
            Operation Annotation attribute used to define how: Command Console, Screen, Console Plugin etc. operation methods are presented in auto-generated user manual, menu TUI, command line args help and ACE Script help
            </summary>
            <seealso cref="T:System.Attribute" />
        </member>
        <member name="M:imbACE.Core.operations.aceMenuItemAttribute.#ctor(imbACE.Core.operations.aceMenuItemAttributeRole,System.String)">
            <summary>
            Postavlja atribut zajedno sa porukom
            </summary>
            <param name="_name">Ime podešavanja na koje se odnosi poruka</param>
            <param name="_msg">Tekst poruke za podešavanje</param>
        </member>
        <member name="F:imbACE.Core.operations.aceMenuItemAttributeRole.aliasNames">
            <summary>
            Alternativni Key/Name za okidanje menija. Alternative su razdvojene ;. Primer: install;inst;i;
            </summary>
        </member>
        <member name="F:imbACE.Core.operations.aceMenuItemAttributeRole.ConfirmMessage">
            <summary>
            Ukljucuje "please confirm" messagebox/inputbox pre nego sto izvrsi menu item. Korisnik moze da odustane
            </summary>
        </member>
        <member name="F:imbACE.Core.operations.aceMenuItemAttributeRole.externalHelpFilename">
            <summary>
            Naziv eksternog txt/html/xml fajla u kome se nalazi dodatno upustvo o operaciji koju izvrsava ovaj menu item
            </summary>
        </member>
        <member name="F:imbACE.Core.operations.aceMenuItemAttributeRole.CmdParamList">
            <summary>
            Lista parametara koje ocekuje kada dobija command line args. Format: count:Int32;name:String;
            </summary>
        </member>
        <member name="T:imbACE.Core.operations.aceOperationSetExecutorBase">
            <summary>
            Klasa koja sadrži izvršni kod za izvršne komande - operacije. Koristi se sa menijem, command line argumentima itd
            </summary>
        </member>
        <member name="T:imbACE.Core.operations.IAceCommandConsole">
            <summary>
            Low-tier interface to imbACE Command Console. 
            </summary>
            <remarks>
                <para>This is interface to the base class of the imbACE scriptable ACE Command Console.</para>
                <para>Next tier is <c>aceAdvancedConsole</c> - implementing: <c>IAceAdvancedConsole</c> interface with more exposed features.</para>
            </remarks>
            <seealso cref="T:imbACE.Core.operations.IAceOperationSetExecutor" />
        </member>
        <member name="M:imbACE.Core.operations.IAceCommandConsole.aceOperation_runPause(System.Int32,System.String)">
            <summary>It pause ACE script execution, optionally displays custom message and allows user to end the pause</summary> 
            <remarks><para>If wait set to -1 there will be no time limit. If userCanEnd is true it will allow user to end the pause and continue.</para></remarks>
            <param name="wait">How log the pause may last? in seconds. If set to -1 there is no time limit</param>
            <param name="msg">Custom message to be displayed to user.</param>
            <seealso cref="T:imbACE.Core.operations.aceOperationSetExecutorBase"/>
        </member>
        <member name="M:imbACE.Core.operations.IAceCommandConsole.aceOperation_runAbort">
            <summary>Should be called from executing script.</summary> 
            <remarks><para>It will abort the running script, and stay in the console shell</para></remarks>
            <seealso cref="T:imbACE.Core.operations.aceOperationSetExecutorBase"/>
        </member>
        <!-- Badly formed XML comment ignored for member "M:imbACE.Core.operations.IAceCommandConsole.aceOperation_consoleHelp(imbACE.Core.commands.tree.aceCommandConsoleHelpOptions)" -->
        <member name="P:imbACE.Core.operations.IAceCommandConsole.consoleTitle">
            <summary> Console title </summary>
        </member>
        <member name="P:imbACE.Core.operations.IAceCommandConsole.consoleHelp">
            <summary> Short help message about this console </summary>
        </member>
        <member name="P:imbACE.Core.operations.IAceCommandConsole.output">
            <summary>
            The primary console output. By default pointed to the <see cref="!:platform"/> via <see cref="P:imbACE.Core.core.aceLog.consoleControl"/>
            </summary>
        </member>
        <member name="P:imbACE.Core.operations.IAceCommandConsole.response">
            <summary>
            Secondary output of the console. By default it is pointed to the <see cref="!:platform"/> output, but it can be directed to a file or other outputs.
            </summary>
        </member>
        <member name="P:imbACE.Core.operations.IAceCommandConsole.commands">
            <summary>
            osnovni menu
            </summary>
        </member>
        <member name="P:imbACE.Core.operations.IAceCommandConsole.helpHeader">
            <summary> Aditional points for console help header text. <see cref="!:imbACE.Services.terminal.console.aceCommandConsole.helpContent"/></summary>
        </member>
        <member name="P:imbACE.Core.operations.IAceCommandConsole.commandSetTree">
            <summary>
            command tree, used for help generation
            </summary>
            <value>
            The command set tree.
            </value>
        </member>
        <member name="P:imbACE.Core.operations.IAceCommandConsole.helpContent">
            <summary>
            Help text short header, used when console api is rendered or shown
            </summary>
        </member>
        <member name="P:imbACE.Core.operations.IAceCommandConsole.scriptRunning">
            <summary> Reference to the console script that is running or was running last time</summary>
        </member>
        <member name="P:imbACE.Core.operations.IAceCommandConsole.consoleIsRunning">
            <summary> It is <c>true</c> if console is turned on, waiting for an input or performing already given command(s) </summary>
        </member>
        <member name="P:imbACE.Core.operations.IAceCommandConsole.linePrefix">
            <summary>
            
            </summary>
        </member>
        <member name="P:imbACE.Core.operations.IAceCommandConsole.lastInput">
            <summary>
            
            </summary>
        </member>
        <member name="M:imbACE.Core.operations.IAceCommandConsole.executeScript(imbACE.Core.operations.IAceConsoleScript,System.Int32)">
            <summary>
            Executes the command console script. <see cref="!:imbACE.Services.terminal.console.aceConsoleScript"/>
            </summary>
            <param name="script">The console script to execute</param>
            <param name="delay">The delay between two instructions in the script, in miliseconds</param>
        </member>
        <member name="M:imbACE.Core.operations.IAceCommandConsole.executeCommand(System.String)">
            <summary>
            Executes the command.
            </summary>
            <param name="input">The input.</param>
        </member>
        <member name="M:imbACE.Core.operations.IAceCommandConsole.start(imbACE.Core.application.IAceApplicationBase)">
            <summary>
            Starts the console
            </summary>
        </member>
        <member name="P:imbACE.Core.operations.IAceConsoleScript.isReady">
            <summary> True if the script is ready for execution </summary>
        </member>
        <member name="P:imbACE.Core.operations.IAceConsoleScript.executionStart">
            <summary> </summary>
        </member>
        <member name="P:imbACE.Core.operations.IAceConsoleScript.executionFinish">
            <summary> </summary>
        </member>
        <member name="M:imbACE.Core.operations.IAceConsoleScript.AbortExecution">
            <summary>
            Calls the script execution abort. It can't abort already called command but will abort on the next.
            </summary>
        </member>
        <member name="M:imbACE.Core.operations.IAceConsoleScript.GetScriptInForm(imbACE.Core.operations.IAceCommandConsole,imbACE.Core.commands.commandLineFormat,System.String)">
            <summary>
            Gets the script in another <see cref="T:imbACE.Core.commands.commandLineFormat"/>
            </summary>
            <param name="console">The console.</param>
            <param name="format">The format.</param>
            <param name="newPath">The new path.</param>
            <returns></returns>
        </member>
        <member name="T:imbACE.Core.operations.IAceOperationSetExecutor">
            <summary>
            Interface for SetExecutor
            </summary>
        </member>
        <member name="T:imbACE.Core.plugins.core.acePluginApplicationContext">
            <summary>
            
            </summary>
        </member>
        <member name="T:imbACE.Core.plugins.core.acePluginBase">
            <summary>
            
            </summary>
            <seealso cref="T:imbACE.Core.plugins.core.IAcePluginBase" />
        </member>
        <member name="P:imbACE.Core.plugins.core.acePluginBase.name">
            <summary>
            Human-readable name for the plugin
            </summary>
        </member>
        <member name="P:imbACE.Core.plugins.core.acePluginBase.description">
            <summary>
            Human-readable description of the plugin
            </summary>
        </member>
        <member name="T:imbACE.Core.plugins.core.IAcePluginBase">
            <summary>
            
            </summary>
            <seealso cref="T:imbSCI.Data.interfaces.IObjectWithName" />
        </member>
        <member name="T:imbACE.Core.plugins.deployer.acePluginDeployer`1">
            <summary>
            Deployer is applicative plugin-registar, focused on plugins inheriting the specified generic type parameter <c>{T}</c>.
            </summary>
            <remarks>
            
            </remarks>
            <typeparam name="T"></typeparam>
        </member>
        <member name="T:imbACE.Core.plugins.deployer.IAcePluginDeployer`1">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
            <seealso cref="T:imbACE.Core.plugins.deployer.IAcePluginDeployerBase" />
        </member>
        <member name="T:imbACE.Core.plugins.NamespaceDoc">
            <summary>
            <para>This namespace covers the plugin system from both sides of implementation.</para>
            </summary>
            <remarks>
            <para>This is initial version, still to be improved</para>
            <list>
            	<listheader>
            		<term>Main parts of the plugin system</term>
            		<description>Relevant for the use of the API and development of your own plugins for a imbACE application</description>
            	</listheader>
            	<item>
            		<term>Manager: <see cref="T:imbACE.Core.plugins.pluginManager"/></term>
            		<description>
            <para>It search specified directory for dlls, loads proper (<see cref="T:imbACE.Core.plugins.core.IAcePluginBase"/>) types found there and creates plugin instance when asked to.</para>
            <para>One instance per plugin directory (having multiple subdirs and kinds of plugins) - the <see cref="T:imbACE.Core.application.IAceApplicationBase"/> already has one and use it, so in the most scenarios only plugin instance creation is used from this class</para>
            </description>
            	</item>
            	<item>
            		<term>Deployer: <see cref="T:imbACE.Core.plugins.deployer.acePluginDeployer`1"/></term>
            		<description>Holds collection of plugin instances (of certain type, {T}) for later assignment and/or application</description>
            	</item>
            	<item>
            		<term>Plugin base: <see cref="T:imbACE.Core.plugins.core.acePluginBase"/> and <see cref="T:imbACE.Core.plugins.core.IAcePluginBase"/></term>
            		<description>Are base resources that you use to create your own plugins, for certain application-specific <see cref="T:imbACE.Core.plugins.deployer.acePluginDeployer`1"/></description>
            	</item>
            </list>
            </remarks>
            <seealso cref="T:imbACE.Core.plugins.core.acePluginBase" />
            <seealso cref="T:imbACE.Core.plugins.core.acePluginApplicationContext" />
            <seealso cref="T:imbACE.Core.plugins.pluginManager" />
        </member>
        <member name="T:imbACE.Core.plugins.pluginManager">
            <summary>
            Loads plugin dlls from the associated directory and creates plugin instances on request
            </summary>
        </member>
        <member name="M:imbACE.Core.plugins.pluginManager.#ctor(imbSCI.Core.files.folders.folderNode)">
            <summary>
            Initializes a new instance of the <see cref="T:imbACE.Core.plugins.pluginManager"/> class.
            </summary>
            <param name="__folderToLoad">The folder to load.</param>
        </member>
        <member name="P:imbACE.Core.plugins.pluginManager.dllFileNames">
            <summary>
            List of DLL files detected
            </summary>
            <value>
            The DLL file names.
            </value>
        </member>
        <member name="P:imbACE.Core.plugins.pluginManager.pluginTypesByPathName">
            <summary>
            Dictionary indexing plugins by relative directory path and type short name: e.g. /myPlugins/reporter.dll -> myPlugins.reporter
            </summary>
            <value>
            
            </value>
        </member>
        <member name="P:imbACE.Core.plugins.pluginManager.pluginTypesByName">
            <summary>
            Short type name dictionary - for easier resolution/call from the ACE Script
            </summary>
            <value>
            The name of the plugin types by.
            </value>
        </member>
        <member name="P:imbACE.Core.plugins.pluginManager.bannedShortNames">
            <summary>
            Collection of short type names that are banned because of ambiquity
            </summary>
            <value>
            The banned short names.
            </value>
        </member>
        <member name="M:imbACE.Core.plugins.pluginManager.GetPluginInstance(System.String,imbACE.Core.operations.IAceCommandConsole,imbACE.Core.plugins.deployer.IAcePluginDeployerBase,imbACE.Core.application.IAceApplicationBase,imbSCI.Core.reporting.ILogBuilder)">
            <summary>
            Gets a new instance of plugin, specified by type name of sub directory.name path
            </summary>
            <param name="pluginName">Name of the plugin.</param>
            <param name="console">The console.</param>
            <param name="deployer">The deployer.</param>
            <param name="application">The application.</param>
            <param name="output">The output.</param>
            <returns></returns>
        </member>
        <member name="M:imbACE.Core.plugins.pluginManager.resolvePlugin(System.String,imbSCI.Core.reporting.ILogBuilder)">
            <summary>
            Resolves the plugin by name or directory.name path
            </summary>
            <param name="plugin_name">Name of the plugin.</param>
            <param name="output">The output.</param>
            <returns></returns>
        </member>
        <member name="M:imbACE.Core.plugins.pluginManager.registerPlugin(System.Type,System.String,imbSCI.Core.reporting.ILogBuilder)">
            <summary>
            Registers the plugin.
            </summary>
            <param name="type">The type.</param>
            <param name="sourceDllPath">The source DLL path.</param>
            <param name="output">The output.</param>
        </member>
        <member name="M:imbACE.Core.plugins.pluginManager.loadPlugins(imbSCI.Core.reporting.ILogBuilder,imbSCI.Core.files.folders.folderNode)">
            <summary>
            Loads all available plugins from the <see cref="T:imbSCI.Core.files.folders.folderNode"/> specified 
            </summary>
            <param name="output">The log builder to output info to</param>
            <param name="altFolder">Alternative folder with plugins to load from, at the end of the process it will set back to the existing one (if there was no existing folder, it will set this as default)</param>
        </member>
        <member name="P:imbACE.Core.plugins.pluginManager.folderWithPlugins">
            <summary>
            Gets or sets the folder with plugins.
            </summary>
            <value>
            The folder with plugins.
            </value>
        </member>
        <member name="P:imbACE.Core.plugins.pluginManager.name">
            <summary>
            Name of the manager
            </summary>
        </member>
        <member name="P:imbACE.Core.plugins.pluginManager.description">
            <summary>
            Descriptive purpose of this manager
            </summary>
        </member>
        <member name="F:imbACE.Core.sound.beep.beepTone.none">
            <summary>
            tisina
            </summary>
        </member>
        <member name="T:imbACE.Core.sound.beep.oneBeep">
            <summary>
            Definition of one sound beep
            </summary>
            <seealso cref="T:System.ComponentModel.INotifyPropertyChanged" />
        </member>
        <member name="P:imbACE.Core.sound.beep.oneBeep.frequency">
            <summary>
            Frekvencija beepa
            </summary>
        </member>
        <member name="P:imbACE.Core.sound.beep.oneBeep.durationms">
            <summary>
            in miliseconds
            </summary>
        </member>
        <member name="P:imbACE.Core.sound.beep.oneBeep.duration">
            <summary>
            Bindable property
            </summary>
        </member>
        <member name="P:imbACE.Core.sound.sequence.beepSequence.tempo">
            <summary>
            bpm - odnosno celih tonova po minutu
            </summary>
        </member>
        <member name="M:imbACE.Core.sound.sequence.beepSequence.#ctor(imbACE.Core.sound.beep.beepTone[])">
            <summary>
            kreira sekvencu
            </summary>
            <param name="tones"></param>
        </member>
        <member name="M:imbACE.Core.sound.soundExtensions.toFrequency(imbACE.Core.sound.beep.beepTone)">
            <summary>
            Vraca frekvenciju za dati ton
            </summary>
            <param name="tone"></param>
            <returns></returns>
        </member>
        <member name="P:imbACE.Core.sound.soundExtensions.beepLibrary">
            <summary>
            biblioteka podrazumevanih tonova
            </summary>
        </member>
        <member name="P:imbACE.Core.sound.soundExtensions.beepTones">
            <summary>
            kolekcija svih tonova
            </summary>
        </member>
        <member name="F:imbACE.Core.xml.collectionTestMode.all">
            <summary>
            Svi moraju da budu TRUE
            </summary>
        </member>
        <member name="F:imbACE.Core.xml.collectionTestMode.any">
            <summary>
            Samo jedan mora da bude TRUE
            </summary>
        </member>
        <member name="T:imbACE.Core.xml.collectRelatives">
            <summary>
            Načini prikupljanja relativnih nodova
            </summary>
        </member>
        <member name="F:imbACE.Core.xml.collectRelatives.endNodes">
            <summary>
            Samo krajnje nodove vraća
            </summary>
        </member>
        <member name="F:imbACE.Core.xml.collectRelatives.upToLevel">
            <summary>
            Nodove do određenog nivoa
            </summary>
        </member>
        <member name="F:imbACE.Core.xml.collectRelatives.downToLevel">
            <summary>
            Nodove od kraja u nazad 
            </summary>
        </member>
        <member name="F:imbACE.Core.xml.collectRelatives.onLevel">
            <summary>
            Nodove na određenom nivou
            </summary>
        </member>
        <member name="F:imbACE.Core.xml.collectRelatives.childs">
            <summary>
            Direktnu decu
            </summary>
        </member>
        <member name="F:imbACE.Core.xml.collectRelatives.brothers">
            <summary>
            Bratske nodove (isti parent)
            </summary>
        </member>
        <member name="F:imbACE.Core.xml.collectRelatives.parentNodes">
            <summary>
            Roditelje do određene dubine
            </summary>
        </member>
        <member name="F:imbACE.Core.xml.collectRelatives.relatives">
            <summary>
            Sve rođake u nazad do određene dubine
            </summary>
        </member>
        <member name="T:imbACE.Core.xml.enums.imbCharSets">
            <summary>
            Setovi karaktera koji se koriste za obradu stringa
            [prevazidjeno]
            </summary>
        </member>
        <member name="T:imbACE.Core.xml.enums.imbNodeValueSource">
            <summary>
            Koji podatak vadi iz XML Nodea
            </summary>
        </member>
        <member name="F:imbACE.Core.xml.enums.imbNodeValueSource.tagName">
            <summary>
            Ime HTML taga
            </summary>
        </member>
        <member name="F:imbACE.Core.xml.enums.imbNodeValueSource.innerText">
            <summary>
            Unutrašnji tekst
            </summary>
        </member>
        <member name="F:imbACE.Core.xml.enums.imbNodeValueSource.outerText">
            <summary>
            Spoljašnji tekst
            </summary>
        </member>
        <member name="F:imbACE.Core.xml.enums.imbNodeValueSource.allInnerText">
            <summary>
            Sav tekst iz nodea 
            </summary>
        </member>
        <member name="F:imbACE.Core.xml.enums.imbNodeValueSource.attLine">
            <summary>
            Linija sa atributima
            </summary>
        </member>
        <member name="F:imbACE.Core.xml.enums.imbNodeValueSource.JSON">
            <summary>
            Konvertuje u JSON objekat
            </summary>
        </member>
        <member name="F:imbACE.Core.xml.enums.imbNodeValueSource.MPS">
            <summary>
            Konvertuje u MPS zapis
            </summary>
        </member>
        <member name="T:imbACE.Core.xml.enums.indexOps">
            <summary>
            Operacije pomoću Liste indeksa
            </summary>
        </member>
        <member name="F:imbACE.Core.xml.enums.indexOps.pass">
            <summary>
            Vraća samo one koji su indeksirani
            </summary>
        </member>
        <member name="F:imbACE.Core.xml.enums.indexOps.remove">
            <summary>
            Vraća samo one koji nisu indeksirani
            </summary>
        </member>
        <member name="T:imbACE.Core.xml.enums.queryEngine">
            <summary>
            Odabir engine-a za vršenje upita 
            </summary>
        </member>
        <member name="T:imbACE.Core.xml.html.HtmlExtensions">
            <summary>
            2014 DEC> razna proširenja vezana za HtmlNode (HtmlAgilityPack)
            </summary>
        </member>
        <member name="M:imbACE.Core.xml.html.HtmlExtensions.htmlNodeReport(HtmlAgilityPack.HtmlNode,imbSCI.Core.reporting.render.ITextRender,System.Boolean)">
            <summary>
            Ubacuje opis HtmlNode-a u izvestaj prema ugradjenom sablonu
            </summary>
            <param name="node">HtmlNode objekat koji se opisuje</param>
            <param name="report">Izvestaj u kome se opisuje</param>
            <param name="isExpandedMode">Da li je rec o prosirenom ili skracenom izvestaju</param>
        </member>
        <member name="T:imbACE.Core.xml.html.preprocessCache">
            <summary>
            Klasa sa kesiranim podesavanjima pred-processinga sadrzaja
            </summary>
        </member>
        <member name="P:imbACE.Core.xml.html.preprocessSettings.doTransliterateToLat">
            <summary>
            Da izvrsi transliteraciju na latinicu
            </summary>
        </member>
        <member name="P:imbACE.Core.xml.html.preprocessSettings.doRemoveHtmlEntities">
            <summary>
            Da skloni HTML entitie
            </summary>
        </member>
        <member name="P:imbACE.Core.xml.html.preprocessSettings.nodesToStrip">
            <summary>
            xmlNodes to strip
            </summary>
        </member>
        <member name="P:imbACE.Core.xml.html.preprocessSettings.nodesToCleanAttributes">
            <summary>
            Nodovi kojima treba potpuno skinuti atribute
            </summary>
        </member>
        <member name="P:imbACE.Core.xml.html.preprocessSettings.doStripScriptTags">
            <summary>
            Da li skloni sve script tagove?
            </summary>
        </member>
        <member name="P:imbACE.Core.xml.html.preprocessSettings.doStripStyleTags">
            <summary>
            Da li da skloni sve Style tagove
            </summary>
        </member>
        <member name="P:imbACE.Core.xml.html.preprocessSettings.doCollapseInlineSemanticTags">
            <summary>
            Da li da ukloni sve inline semantic tagove
            </summary>
        </member>
        <member name="P:imbACE.Core.xml.html.preprocessSettings.doFocusToBody">
            <summary>
            Da li da se fokusira u Body tag?
            </summary>
        </member>
        <member name="M:imbACE.Core.xml.html.preprocessSettings.preprocessNodes(System.Xml.XPath.XPathNavigator)">
            <summary>
            2014c> vraca optimizovan Xml sadrzaj
            </summary>
            <param name="input"></param>
            <param name="settings"></param>
            <param name="cached"></param>
            <returns></returns>
        </member>
        <member name="T:imbACE.Core.xml.imbAdvancedXPath">
            <summary>
            imbVeles napredni xPath mehanizam (2013a)
            </summary>
            <remarks>
            Nema upotrebu u novijem queryXPath mehanizmu (2014)
            </remarks>
        </member>
        <member name="M:imbACE.Core.xml.imbAdvancedXPath.xPathExecute(System.String,System.Xml.XPath.IXPathNavigable,imbACE.Core.xml.imbNamespaceSetup,imbACE.Core.xml.enums.queryEngine)">
            <summary>
            2014c: glavni poziv za izvrsavanje xPath upita nad izvorom - ne vrsi lokalizaciju putanje
            </summary>
            <param name="xPath"></param>
            <param name="source"></param>
            <param name="ns"></param>
            <param name="engine"></param>
            <returns></returns>
        </member>
        <member name="M:imbACE.Core.xml.imbAdvancedXPath.xPathExecution(System.String,System.Xml.XmlNode,imbACE.Core.xml.imbNamespaceSetup,imbACE.Core.xml.enums.queryEngine,System.Boolean,System.Int32)">
            <summary>
            2013a: Vrši xPath upit i vraća onaj element koji je definisan u Index parametru. 
            </summary>
            <param name="xPath"></param>
            <param name="source"></param>
            <param name="nsSetup"></param>
            <param name="engine"></param>
            <param name="trimPathWithSource"></param>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:imbACE.Core.xml.imbAdvancedXPath.xPathExecution(System.String,System.Xml.XmlNode,imbACE.Core.xml.imbNamespaceSetup,imbACE.Core.xml.enums.queryEngine,System.Boolean)">
            <summary>
            GLAVNI MEHANIZAM - low-level
            </summary>
            <param name="xPath"></param>
            <param name="source"></param>
            <param name="nsSetup"></param>
            <param name="engine"></param>
            <param name="report"></param>
            <returns></returns>
        </member>
        <member name="P:imbACE.Core.xml.imbNamespaceSetup.namespaceManager">
            <summary>
            XmlNamespace
            </summary>
        </member>
        <member name="P:imbACE.Core.xml.imbNamespaceSetup.nsPrefix">
            <summary>
            Prefix za namespace
            </summary>
        </member>
        <member name="P:imbACE.Core.xml.imbNamespaceSetup.nsSourceUrl">
            <summary>
            Putanja za dati namespace
            </summary>
        </member>
        <member name="T:imbACE.Core.xml.imbStringIndexWorks">
            <summary>
            Indeksne operacije nad stringom
            </summary>
        </member>
        <member name="M:imbACE.Core.xml.imbStringIndexWorks.extendKeys``1(``0,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            2014C> prosiruje listu kljuceva za varijante
            </summary>
            <typeparam name="T"></typeparam>
            <param name="input"></param>
            <param name="lowLetters"></param>
            <param name="capLetters"></param>
            <param name="removeDouble"></param>
            <returns></returns>
        </member>
        <member name="M:imbACE.Core.xml.imbStringIndexWorks.imbMembersToStringLine(System.Collections.Generic.IEnumerable{System.Object},System.Int32,System.String,System.String,System.String,System.Boolean,System.String,System.String)">
            <summary>
            Sve "clanove" objekata u nizu dodaje. Ako je limit -1, onda nema limita. Ako je displayProperty "" onda prikazuje sam objekat prikazuje sa .ToString().
            </summary>
            <param name="input">Niz objekata</param>
            <param name="limit">Koliko članova najviše da prikaže? Ako je limit -1, onda nema limita. Ako prekine niz koristiće endSufix na kraju</param>
            <param name="displayProperty">Koji property da prikaže od selektovanog objekta. Podržane su putanje (prop1.prop2.prop3), ako je "" onda će prikazati sam objekat preko .ToString()</param>
            <param name="spliter">Znak ili string koji stavlja između elemenata niza</param>
            <param name="endSufix">Znak ili string koji stavlja ako prekine niz usled prekoračenja Limita</param>
            <param name="eachItemPrefix">Dodaje ispred svakog itema</param>
            <param name="eachItemSufix">Dodaje posle svakog itema</param>
            <returns>Sređen string</returns>
        </member>
        <member name="M:imbACE.Core.xml.imbStringIndexWorks.imbGetFirstValue(System.Collections.Generic.IEnumerable{System.String},System.String)">
            <summary>
            Vraća prvu vrednost u listi strigova - može se doradi i na univerzalni nivo
            </summary>
            <param name="input"></param>
            <param name="def"></param>
            <returns></returns>
        </member>
        <member name="M:imbACE.Core.xml.imbStringIndexWorks.imbLinesWithNeedle(System.String,System.String,System.Boolean)">
            <summary>
            Vraca string koji sadrži samo linije koje imaju needle
            </summary>
            <param name="input">Ulazni string</param>
            <param name="needle">String koji se traži</param>
            <param name="inverseTest">Da li da invertuje razultate</param>
            <returns>Samo linije koje imaju needle</returns>
        </member>
        <member name="M:imbACE.Core.xml.imbStringIndexWorks.filterStringRange(System.String,System.Collections.Generic.List{System.String},imbACE.Core.xml.enums.indexOps)">
            <summary>
            Obrađuju string podatak korišćenjem imbIndexOps metoda
            </summary>
            <param name="indexes">Indeksna instrukcija</param>
            <param name="input">Ulazni string</param>
            <param name="operation">Tip operacije</param>
            <returns>Rezultat</returns>
        </member>
        <member name="M:imbACE.Core.xml.imbStringIndexWorks.rangeStringToIndexList(System.String,System.Int32)">
            <summary>
            HELPER Konvertuje range line u listu indexa. Format:  3-5,8 , 2-8, 9, *
            </summary>
            <remarks>
             ako postoji 3>, to znači od 3 do kraja, ako stoji manje 3 onda kontra
            </remarks>
            <param name="rangeLine">Linija npr> 1=5, 8, 12-20, 3 </param>
            <returns>Listu sa indeksima</returns>
        </member>
        <member name="T:imbACE.Core.xml.imbXmlCommonTools">
            <summary>
            Klasa za osnovne operacije nad xmlNode objektima
            </summary>
        </member>
        <member name="M:imbACE.Core.xml.imbXmlCommonTools.imbToList(System.Xml.XmlNodeList)">
            <summary>
            Konvertuje XmlNodeList u List XmlNode
            </summary>
            <param name="source"></param>
            <returns></returns>
        </member>
        <member name="M:imbACE.Core.xml.imbXmlCommonTools.getMPSRows(System.Collections.Generic.List{System.Xml.XmlNode},System.String,System.Boolean,System.Boolean)">
            <summary>
            Vraca listu MPS redova 
            </summary>
            <param name="source"></param>
            <param name="pathOfParent">Path prefix</param>
            <param name="ignoreAttributes"></param>
            <param name="ignoreChild"></param>
            <returns></returns>
        </member>
        <member name="M:imbACE.Core.xml.imbXmlCommonTools.getMPSRow(System.Xml.XmlNode,System.String,System.Boolean,System.Boolean)">
            <summary>
            Vraca kompletan MPS row na osnovu prosledjenog XmlNodea
            </summary>
            <param name="source"></param>
            <param name="pathOfParent">Path prefix</param>
            <param name="ignoreAttributes"></param>
            <param name="ignoreChild"></param>
            <returns></returns>
        </member>
        <member name="M:imbACE.Core.xml.imbXmlCommonTools.getMPSRow(System.Collections.Generic.List{System.Xml.XmlNode},System.String,System.Boolean,System.Boolean)">
            <summary>
            Vraca kompletan MPS row na osnovu prosledjenog XmlNodea
            </summary>
            <param name="source"></param>
            <param name="pathOfParent">Path prefix</param>
            <param name="ignoreAttributes"></param>
            <param name="ignoreChild"></param>
            <returns></returns>
        </member>
        <member name="M:imbACE.Core.xml.imbXmlCommonTools.getMPSLine(System.Xml.XmlNode,System.String,System.Boolean,System.Boolean)">
            <summary>
            Vraca MPS line za jedan node - bez row wrappera
            </summary>
            <param name="source"></param>
            <param name="pathOfParent">Path prefix</param>
            <param name="ignoreAttributes"></param>
            <param name="ignoreChild"></param>
            <returns></returns>
        </member>
        <member name="M:imbACE.Core.xml.imbXmlCommonTools.getNodeValueUniversal(System.Xml.XPath.IXPathNavigable,System.String,System.Boolean)">
            <summary>
            Metod vraca vrednost za node - prema @dataSource name iz #nodeValueSource# ili prema istoimenom atributu ako nema @
            </summary>
            <param name="source"></param>
            <param name="dataSource"></param>
            <returns></returns>
        </member>
        <member name="M:imbACE.Core.xml.imbXmlCommonTools.getNodeValues(System.Collections.Generic.IEnumerable{System.Xml.XmlNode},imbACE.Core.xml.enums.imbNodeValueSource,System.String)">
            <summary>
            Vraća string sa NodeValue vrednostima za svaki XmlNode iz liste
            </summary>
            <param name="source">Izvor</param>
            <param name="dataSource">Koji podatak se koristi</param>
            <param name="nodeSufix">Opcioni dodatak na kraju svakog nodea</param>
            <returns>String sa svim vrednostima</returns>
        </member>
        <member name="M:imbACE.Core.xml.imbXmlCommonTools.getNodeDataSourceMulti(System.Xml.XPath.IXPathNavigable,System.String,System.Boolean)">
            <summary>
            2013a: U dataSourceTemplate popunjava podatke na osnovu zadatih dataSource-a
            </summary>
            <param name="source"></param>
            <param name="dataSourceTemplate">Ako ne nadje podatak ostavice datasource poziv</param>
            <param name="leaveDataSourceMark">Da li da ostavi data source mark u slucaju da ne postoji atribut</param>
            <returns></returns>
        </member>
        <member name="M:imbACE.Core.xml.imbXmlCommonTools.getNodeDataSourceAutomatic(System.Xml.XPath.IXPathNavigable,System.Boolean)">
            <summary>
            2013a: vraća reprezentativnu vrednost grane u skladu sa njenom definicijom !
            Ovo je low level i treba koristiti textRetriveEngine
            </summary>
            <param name="source"></param>
            <returns></returns>
        </member>
        <member name="M:imbACE.Core.xml.imbXmlCommonTools.getNodeDataSourceValue(System.Xml.XPath.IXPathNavigable,imbACE.Core.xml.enums.imbNodeValueSource,System.Boolean)">
            <summary>
            Izvlaci String value iz xmlNode-a prema zadatom dataSource-u. Ako nije pronadjen dataSource, onda pretpostavlja da je rec o atributu
            </summary>
            <param name="source">Node iz kojeg vadi podatak</param>
            <param name="dataSource">Koji podatak vadi</param>
            <param name="leaveDataSourceMark">Da li ispisuje odakle je uzeta vrednost</param>
            <returns></returns>
        </member>
        <member name="M:imbACE.Core.xml.imbXmlCommonTools.getNodeDataSourceValue(System.Xml.XPath.IXPathNavigable,System.String,System.Boolean)">
            <summary>
            Izvlaci String value iz xmlNode-a prema zadatom dataSource-u. Ako nije pronadjen dataSource, onda pretpostavlja da je rec o atributu
            </summary>
            <param name="source">Node iz kojeg vadi podatak</param>
            <param name="dataSource">Koji podatak vadi</param>
            <param name="leaveDataSourceMark">Da li ispisuje odakle je uzeta vrednost</param>
            <returns></returns>
        </member>
        <member name="M:imbACE.Core.xml.imbXmlCommonTools.getAttributeValue(System.Xml.XmlNode,System.String)">
            <summary>
            Vraca vrednost attributa
            </summary>
            <param name="source"></param>
            <param name="attributeName"></param>
            <returns></returns>
        </member>
        <member name="M:imbACE.Core.xml.imbXmlCommonTools.getAttributeValue(System.Xml.XPath.XPathNavigator,System.String)">
            <summary>
            Vraca vrednost attributa
            </summary>
            <param name="source"></param>
            <param name="attributeName"></param>
            <returns></returns>
        </member>
        <member name="M:imbACE.Core.xml.imbXmlCommonTools.getAttributeLine(System.Xml.XmlNode)">
            <summary>
            Vraca liniju atributa
            </summary>
            <param name="node"></param>
            <returns></returns>
        </member>
        <member name="M:imbACE.Core.xml.imbXmlCommonTools.getSubnodeString(System.Xml.XmlNode)">
            <summary>
            Prikuplja sav vidljiv tekst iz nodea - 
            </summary>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:imbACE.Core.xml.imbXmlCommonTools.convertXml(System.Xml.XmlDocument)">
            <summary>
            Konvertuje XmlDocument u XPathDocument
            </summary>
            <param name="input">XmlDocument izvor</param>
            <returns>XPathDocument</returns>
        </member>
        <member name="M:imbACE.Core.xml.imbXmlCommonTools.compareAttributeValue(System.Xml.XmlNode,System.String,System.String,imbSCI.Core.extensions.text.stringMatchPolicy,imbACE.Core.xml.collectionTestMode)">
            <summary>
            Testira da li se u prosledjenom nodeu poklapa bar jedna vrednost attributa
            </summary>
            <param name="source">Node koji se testira</param>
            <param name="attributeNames">DList spisak atributa ili @dataSource</param>
            <param name="attributeValues">DList spisak vrednosti za svaki od atributa - redosled je bitan</param>
            <returns></returns>
        </member>
        <member name="M:imbACE.Core.xml.imbXmlCommonTools.compareAttributeValue(System.Xml.XmlNode,System.Collections.Generic.List{System.String},System.Collections.Generic.List{System.String},imbSCI.Core.extensions.text.stringMatchPolicy,imbACE.Core.xml.collectionTestMode)">
            <summary>
            Testira da li se u prosledjenom nodeu poklapa bar jedna vrednost attributa
            </summary>
            <param name="source">Node koji se testira</param>
            <param name="attNames">Lista imena atributa / odnosno specijalnih oznaka za izvor podatka</param>
            <param name="attValues">Lista vrednosti za svaki od imena atributa - prema istom redosledu</param>
            <returns></returns>
        </member>
        <member name="M:imbACE.Core.xml.imbXmlCommonTools.filterNodeList(System.Collections.Generic.List{System.Xml.XmlNode},System.String,System.String,imbSCI.Core.extensions.text.stringMatchPolicy,imbACE.Core.xml.collectionTestMode,System.Boolean)">
            <summary>
            Filtriranje liste XML nodova na osnovu zadate liste ključnih reči i vrednosti 
            </summary>
            <param name="output">Lista XMLNodes koju će filtrirati komanda </param>
            <param name="attributeNames">MultiOps spisak izvora vrednosti - imena atributa odnosno specijalne oznake</param>
            <param name="attributeValues">MultiOps spisak vrednsoti za svaki od imena atributa / izvora. Redosled je važan.</param>
            <param name="matchPolicy">Vrsta testa vrednosti</param>
            <param name="testMode">Kriterijum za ceo skup</param>
            <param name="isInverted">Da li da koristi inverzni kriterijum</param>
            <returns>Filtirana lista</returns>
        </member>
        <member name="M:imbACE.Core.xml.imbXmlCommonTools.filterNodeList(System.Collections.Generic.List{System.Xml.XmlNode},System.Collections.Generic.List{System.String},System.Collections.Generic.List{System.String},imbSCI.Core.extensions.text.stringMatchPolicy,imbACE.Core.xml.collectionTestMode,System.Boolean)">
            <summary>
            Filtriranje liste XML nodova na osnovu zadate liste ključnih reči i vrednosti 
            </summary>
            <param name="output">Lista XMLNodes koju će filtrirati komanda </param>
            <param name="attributeNames">Lista imena atributa odnosno specijalne oznake</param>
            <param name="attributeValues">Lista vrednosti svaki od imena atributa / izvora. Redosled je važan.</param>
            <param name="matchPolicy">Vrsta testa vrednosti</param>
            <param name="testMode">Kriterijum za ceo skup</param>
            <param name="isInverted">Da li da koristi inverzni kriterijum</param>
            <returns>Filtirana lista</returns>
        </member>
        <member name="M:imbACE.Core.xml.imbXmlCommonTools.filterNodeList(System.String,System.Collections.Generic.List{System.Xml.XmlNode})">
            <summary>
            Vraca listu XmlNode-a koja odgovara definiciji indeksa
            </summary>
            <param name="indexes">Definicija indexa u string formatu</param>
            <param name="input">Ulazna lista</param>
            <returns>Filtriranu listu</returns>
        </member>
        <member name="M:imbACE.Core.xml.imbXmlCommonTools.filterNodeList(System.Collections.Generic.List{System.Int32},System.Collections.Generic.List{System.Xml.XmlNode})">
            <summary>
            Vraca listu XmlNode-a prema datom spisku indeksa
            </summary>
            <param name="indexes">Lista indeksa</param>
            <param name="input">Ulazna lista</param>
            <returns>Filtrirana lista</returns>
        </member>
        <member name="M:imbACE.Core.xml.imbXmlCommonTools.FindNamespacePrefix(System.Xml.XmlNamespaceManager)">
            <summary>
            Pronalazi namespace prefix
            </summary>
            <param name="nsManager"></param>
            <returns></returns>
        </member>
        <member name="M:imbACE.Core.xml.imbXmlCommonTools.FindLocalXPath(System.Xml.XmlNode,System.Xml.XmlNode,System.Xml.XmlNamespaceManager)">
            <summary>
            Pronalazi lokalni XPath
            </summary>
            <param name="node"></param>
            <param name="parentNode"></param>
            <param name="nsManager"></param>
            <returns></returns>
        </member>
        <member name="M:imbACE.Core.xml.imbXmlCommonTools.FindXPath(System.Xml.XmlNode,System.String)">
            <summary>
            Vraca xPath
            </summary>
            <param name="node"></param>
            <returns></returns>
        </member>
        <member name="M:imbACE.Core.xml.imbXmlCommonTools.getXPathName(System.Xml.XmlNode,System.Xml.XmlNamespaceManager)">
            <summary>
            Vraća samo sopstveni XPath element, odnosno ime XML nodea
            </summary>
            <param name="node"></param>
            <param name="ns"></param>
            <returns></returns>
        </member>
        <member name="M:imbACE.Core.xml.imbXmlCommonTools.FindXPath(System.Xml.XmlNode,System.Xml.XmlNamespaceManager)">
            <summary>
            Vraca XPath putanju prosledjenog nodea
            </summary>
            <param name="node"></param>
            <param name="nsManager"></param>
            <returns></returns>
        </member>
        <member name="M:imbACE.Core.xml.imbXmlCommonTools.FindAllXPaths(System.Xml.XmlNode,imbACE.Core.xml.imbNamespaceSetup,System.String,System.Boolean)">
            <summary>
            Vraca spisak svih xPathova - PREVAZIDJENO JER POSTOJI EFIKASNIJI METOD PREKO END NODE-a i XPatha
            </summary>
            <param name="node">Parent xmlNode</param>
            <param name="nsManager">Menadžer za namespace</param>
            <param name="prefixToTrim">Od svake putanje može odseći određeni prefiks</param>
            <param name="toDefaultList">Rezultat da bude u DefaultList / Preset list formatu</param>
            <returns>Spisak svih xPath putanja</returns>
        </member>
        <member name="F:imbACE.Core.xml.imbXmlExtendedTools.useXPathOptimization">
            <summary>
            Da li da koristi XPath tamo gde je moguce
            </summary>
        </member>
        <member name="M:imbACE.Core.xml.imbXmlExtendedTools.makeNodeByxPath(System.Xml.XmlDocument,System.Xml.XmlNode,System.String,System.Xml.XmlNode,imbACE.Core.xml.imbNamespaceSetup)">
            <summary>
            Osigurava da prosledjeni XmlDocument ima element za dati xPath i vraća referencu prema poslednjem XmlNode-u koji je kreiran 
            </summary>
        </member>
        <member name="M:imbACE.Core.xml.imbXmlExtendedTools.getOuterXml(System.Collections.Generic.List{System.Xml.XmlNode})">
            <summary>
            Vraća OuterXml String od liste
            </summary>
            <param name="source">Node lista koju konvertuje</param>
            <returns>String cele liste</returns>
        </member>
        <member name="M:imbACE.Core.xml.imbXmlExtendedTools.collectChildren(System.Collections.Generic.List{System.Xml.XmlNode},System.String,System.Int32)">
            <summary>
            Vraća listu XmlNode-a u skladu sa kriterijumima
            </summary>
            <param name="source">Node lista od koje kreće</param>
            <param name="collectMode">Način na koji prikuplja</param>
            <param name="level">Koliko nivoa u dubinu (opciono)</param>
            <returns>Lista XmlNode-a koji su u određenom odnosu sa Source</returns>
        </member>
        <member name="M:imbACE.Core.xml.imbXmlExtendedTools.collectChildren(System.Collections.Generic.List{System.Xml.XmlNode},imbACE.Core.xml.collectRelatives,System.Int32)">
            <summary>
            Vraća listu XmlNode-a u skladu sa kriterijumima
            </summary>
            <param name="source">Node lista od koje kreće</param>
            <param name="collectMode">Način na koji prikuplja</param>
            <param name="level">Koliko nivoa u dubinu (opciono)</param>
            <returns>Lista XmlNode-a koji su u određenom odnosu sa Source</returns>
        </member>
        <member name="M:imbACE.Core.xml.imbXmlExtendedTools.collectChildren(System.Xml.XmlNode,imbACE.Core.xml.collectRelatives,System.Int32)">
            <summary>
            Vraća listu XmlNode-a u skladu sa kriterijumima
            </summary>
            <param name="source">Node od kojeg kreće</param>
            <param name="collectMode">Način na koji prikuplja</param>
            <param name="level">Koliko nivoa u dubinu (opciono)</param>
            <returns>Lista XmlNode-a koji su u određenom odnosu sa Source</returns>
        </member>
        <member name="M:imbACE.Core.xml.imbXmlExtendedTools.collectChildren(System.Xml.XmlNode,System.String,System.Int32)">
            <summary>
            Vraća listu XmlNode-a u skladu sa kriterijumima
            </summary>
            <param name="source">Node od kojeg kreće</param>
            <param name="collectMode">Način na koji prikuplja</param>
            <param name="level">Koliko nivoa u dubinu (opciono)</param>
            <returns>Lista XmlNode-a koji su u određenom odnosu sa Source</returns>
        </member>
        <member name="M:imbACE.Core.xml.imbXmlExtendedTools.getChildren(System.Collections.Generic.List{System.Xml.XmlNode},System.Int32,System.Int32,System.Boolean,System.Int32)">
            <summary>
            Vraća decu nodea u skladu sa parametrima
            </summary>
            <param name="nd">Source xmlNode lista</param>
            <param name="l">Trenutna dubina - zbog rekurzivnog pozivanja</param>
            <param name="depth">Nivo do kojeg se ide - relativno je na startLevel</param>
            <param name="isAdditive">Da li dodaje ili samo prosleđuje</param>
            <param name="startLevel">Od kog nivoa počinje da skuplja - koristi se za selektovanje "od kraja"</param>
            <return>Lista child nodea</return>
        </member>
        <member name="M:imbACE.Core.xml.imbXmlExtendedTools.getChildren(System.Xml.XmlNode,System.Int32,System.Int32,System.Boolean,System.Int32)">
            <summary>
            Vraća decu nodea u skladu sa parametrima
            </summary>
            <param name="nd">Source xmlNode</param>
            <param name="l">Trenutna dubina - zbog rekurzivnog pozivanja</param>
            <param name="depth">Nivo do kojeg se ide - relativno je na startLevel</param>
            <param name="isAdditive">Da li dodaje ili samo prosleđuje</param>
            <param name="startLevel">Od kog nivoa počinje da skuplja - koristi se za selektovanje "od kraja"</param>
            <return>Lista child nodea</return>
        </member>
        <member name="T:imbACE.Core.xml.imbXmlHtmlReparation">
            <summary>
            2013a> napredne operacije za XML-HTML divergenciju
            OVDE doradjivati kada postoje problemi sa XML importovanjem
            </summary>
        </member>
        <member name="M:imbACE.Core.xml.imbXmlHtmlReparation.removeNode(System.Xml.XPath.XPathNavigator,System.Xml.XPath.XPathNavigator,System.Boolean)">
            <summary>
            Univerzalna komanda za uklanjanje child nodea
            </summary>
            <param name="target"></param>
            <param name="parent"></param>
            <returns></returns>
        </member>
        <member name="M:imbACE.Core.xml.imbXmlHtmlReparation.filterCloning(System.Xml.XPath.XPathNavigator,imbACE.Core.xml.html.preprocessCache,System.Collections.Generic.List{System.String},System.Int32,System.Action{System.Xml.XPath.XPathNavigator})">
            <summary>
            Klonira sadrzaj prema filteru
            </summary>
            <param name="sourceParent"></param>
            <param name="scopedTags">Tagovi koji mogu da se nadju u kolekciji</param>
            <param name="cleanAttribs">Malim slovima se radi poredjenje - </param>
            <param name="targetParent"></param>
            <param name="nsPrefix"></param>
            <returns></returns>
        </member>
        <member name="M:imbACE.Core.xml.imbXmlHtmlReparation.repairXmlCode(System.String,System.String)">
            <summary>
            2013a> sredjuje XML koji je ucitan
            </summary>
            <param name="sourceCode"></param>
            <returns></returns>
        </member>
        <!-- Badly formed XML comment ignored for member "M:imbACE.Core.xml.imbXmlHtmlReparation.HtmlDocumentToXml(HtmlAgilityPack.HtmlDocument)" -->
        <member name="M:imbACE.Core.xml.imbXmlHtmlReparation.repairHtmlDocument(HtmlAgilityPack.HtmlDocument)">
            <summary>
            Proverava sve nodove u dokumentu
            </summary>
            <param name="input"></param>
        </member>
        <member name="M:imbACE.Core.xml.imbXmlHtmlReparation.cleanNode(HtmlAgilityPack.HtmlNode)">
            <summary>
            Cisti probleme u pojedinacnom nodeu
            </summary>
            <param name="node"></param>
        </member>
        <member name="T:imbACE.Core.xml.imbXmlMultiMapping">
            <summary>
            Operacije sa multi mapama
            </summary>
        </member>
        <member name="M:imbACE.Core.xml.imbXmlMultiMapping.executeMultiMap(System.String,System.Xml.XmlNamespaceManager,System.String,System.Xml.XmlNode,System.Collections.ObjectModel.ObservableCollection{imbACE.Core.xml.imbxPathMultiMapPair},imbACE.Core.xml.enums.imbNodeValueSource)">
            <summary>
            Izvršava MultiMap modul
            </summary>
            <param name="rootCell">Polje u koje je root za upisivanje vrednosti</param>
            <param name="contextForModules"></param>
            <param name="xPathPrefix"></param>
            <param name="source"></param>
        </member>
        <member name="T:imbACE.Core.xml.imbXmlXPathTools">
            <summary>
            Posebne alatke za debug i izvršavanje XPath tool-a
            </summary>
        </member>
        <member name="P:imbACE.Core.xml.imbXmlXPathTools.defaultSource">
            <summary>
            Podrazumevani source za xPath query - kada je prosledjeni source null
            </summary>
        </member>
        <member name="M:imbACE.Core.xml.imbXmlXPathTools.makeXPathForAllNodes(System.Collections.Generic.ICollection{System.String},System.Boolean,System.String,System.Boolean,System.Boolean,System.String)">
            <summary>
            Pravi XPath koji ce selektovati sve nodove sa spiska
            </summary>
            <param name="keys">Nazivi nodova (tagova) koje treba selektovati</param>
            <param name="count">Samo da prebroji nodove</param>
            <returns></returns>
        </member>
        <member name="M:imbACE.Core.xml.imbXmlXPathTools.makeDebugMessage(System.String,System.String,System.String,System.String,System.Int32)">
            <summary>
            Pravi DEBUG poruku u skladu sa podešavanjima
            </summary>
            <param name="xPath"></param>
            <param name="sourceXPath"></param>
            <param name="finalPath"></param>
            <param name="result"></param>
            <param name="resCount"></param>
        </member>
        <member name="M:imbACE.Core.xml.imbXmlXPathTools.queryXPath(System.String,System.Xml.XmlNamespaceManager,System.Xml.XmlNode,System.Boolean)">
            <summary>
            Izvršava xPath query i konvertuje rezultat u listu - OVO JE ISPRAVNI MEHANIZAM
            </summary>
            <param name="xPath"></param>
            <param name="nsManager"></param>
            <param name="source"></param>
            <param name="trimPathWithSource">SA TRUE RADI DOBRO</param>
            <returns></returns>
        </member>
        <member name="M:imbACE.Core.xml.imbXmlXPathTools.queryXPath(System.Xml.XPath.IXPathNavigable,System.String,System.Xml.XmlNamespaceManager)">
            <summary>
            2014> izvrsava upit nad bilo kojim IXPathNavigable objektom
            </summary>
            <param name="source"></param>
            <param name="xPath"></param>
            <param name="nsManager"></param>
            <returns></returns>
        </member>
        <member name="M:imbACE.Core.xml.imbXmlXPathTools.queryXPathStr(System.String,System.Xml.XmlNamespaceManager,System.Xml.XmlNode,System.Boolean,imbACE.Core.xml.enums.imbNodeValueSource)">
            <summary>
            Vraca podatak a ne node
            </summary>
            <param name="xPath"></param>
            <param name="nsManager"></param>
            <param name="source"></param>
            <param name="trimPathWithSource"></param>
            <param name="valueSource"></param>
            <returns></returns>
        </member>
        <member name="M:imbACE.Core.xml.imbXmlXPathTools.queryXPathObj(System.String,System.Xml.XmlNamespaceManager,System.Xml.XmlNode,System.Boolean)">
            <summary>
            Glavna XPath Funkcija
            </summary>
            <param name="xPath">XPathInstrukcija</param>
            <param name="nsManager">NameSpace manager, ako ostane Null koristiće default</param>
            <param name="source">XmlNode od kojeg kreće izvršavanje</param>
            <param name="trimPathWithSource">Da li da od xPath instrukcije oduzme source putanju? Ostaviti Ne ako je već lokalizovano</param>
            <returns>XmlNode ili neki drugi objekat - u zavisnosti od upita</returns>
        </member>
        <member name="M:imbACE.Core.xml.imbXmlXPathTools.xPathDiagSelect(System.Collections.Generic.List{System.String},System.Xml.XmlNamespaceManager,System.Xml.XmlNode)">
            <summary>
            Izvrsava xPath uz dijagnostiku
            </summary>
            <param name="xPaths"></param>
            <param name="mng"></param>
            <param name="source"></param>
            <returns></returns>
        </member>
        <member name="T:imbACE.Core.xml.imbxPathMultiMapPair">
            <summary>
            Jedan par lokalnog xPath-a i lokalnog cellPath-a
            </summary>
        </member>
        <member name="P:imbACE.Core.xml.imbxPathMultiMapPair.cellPath">
            <summary>
            Lokalna putanja ka imbReportCell koji treba da primi podatak
            </summary>
        </member>
        <member name="P:imbACE.Core.xml.imbxPathMultiMapPair.xPath">
            <summary>
            Lokalni xPath koji treba da "selektuje" podatak
            </summary>
        </member>
        <member name="T:imbACE.Core.xml.IxPathQuerySourceProvider">
            <summary>
            xPathQuery koji moze da razmenjuje izvor podataka
            </summary>
        </member>
        <member name="T:imbACE.Core.xml.query.imbXPathQuery">
            <summary>
            2014c> Collection item: imbXPathQuery, part of imbXPathQueryCollection
            </summary>
        </member>
        <member name="M:imbACE.Core.xml.query.imbXPathQuery.#ctor(System.String,System.Xml.XmlNode)">
            <summary>
            Instanciranje novog querija -- za dat xpath
            </summary>
            <param name="__xPath"></param>
            <param name="__input"></param>
        </member>
        <member name="P:imbACE.Core.xml.query.imbXPathQuery.xPath">
            <summary>
            komanda koja je pozivana
            </summary>
        </member>
        <member name="P:imbACE.Core.xml.query.imbXPathQuery.report">
            <summary>
            Report line
            </summary>
        </member>
        <member name="P:imbACE.Core.xml.query.imbXPathQuery.xmlNode">
            <summary>
            XmlNode koji je dosao kao odgovor
            </summary>
        </member>
        <member name="T:imbACE.Core.xml.query.imbXPathQueryCollection">
            <summary>
            Kolekcija sa rezultatima - 
            </summary>
        </member>
        <member name="M:imbACE.Core.xml.query.imbXPathQueryCollection.isExecutedOkText">
            <summary>
            Da li je uspeo upit
            </summary>
            <returns></returns>
        </member>
        <member name="M:imbACE.Core.xml.query.imbXPathQueryCollection.getFirstNode">
            <summary>
            Vraca prvi node ako postoji
            </summary>
            <returns></returns>
        </member>
        <member name="P:imbACE.Core.xml.query.imbXPathQueryCollection.isExecutedOk">
            <summary>
            da li je upit uspesno izvrsen
            </summary>
        </member>
        <member name="T:imbACE.Core.xml.query.xPathQueryCache">
            <summary>
            2014c>Kesirani podaci xPath Queryija
            </summary>
        </member>
        <member name="M:imbACE.Core.xml.query.xPathQueryCache.#ctor(System.Xml.XPath.IXPathNavigable,System.Collections.Generic.ICollection{System.String},System.Boolean,System.Boolean)">
            <summary>
            Pravi xPath za selektovanje svih kljuceva
            </summary>
            <param name="__source"></param>
            <param name="__keysForXpath"></param>
            <param name="count"></param>
            <param name="extendVariations"></param>
        </member>
        <member name="M:imbACE.Core.xml.query.xPathQueryCache.#ctor(System.String,System.Xml.XPath.IXPathNavigable)">
            <summary>
            Pravi proizvoljan query
            </summary>
            <param name="__xPath"></param>
            <param name="__source"></param>
        </member>
        <member name="M:imbACE.Core.xml.query.xPathQueryCache.#ctor(System.String)">
            <summary>
            samo snima upit
            </summary>
            <param name="__xPath"></param>
        </member>
        <member name="P:imbACE.Core.xml.query.xPathQueryCache.xPath">
            <summary>
            komanda XPath upita
            </summary>
        </member>
        <member name="M:imbACE.Core.xml.query.xPathQueryCache.basic(System.String,System.Xml.XPath.IXPathNavigable)">
            <summary>
            Osnovno izvrsavanje kverija
            </summary>
            <param name="__xPath"></param>
            <param name="__source"></param>
        </member>
        <member name="T:imbACE.Core.xml.query.xPathQueryCacheExtended">
            <summary>
            Metode za IxPathQuerySourceProvider
            </summary>
        </member>
        <member name="M:imbACE.Core.xml.query.xPathQueryCacheExtended.connectToSource(imbACE.Core.xml.IxPathQuerySourceProvider,System.Xml.XPath.IXPathNavigable)">
            <summary>
            povezuje se sa novim izvorom - ako se prefix razlikuje regenerise i upit
            </summary>
            <param name="__source"></param>
            <param name="target">todo: describe target parameter on connectToSource</param>
        </member>
        <member name="P:imbACE.Core.xml.query.xPathQueryCollection.xmlNamespace">
            <summary>
            podesavanja za namespace
            </summary>
        </member>
        <member name="T:imbACE.Core.xml.xpathDebugMode">
            <summary>
            Mod xpath Debug mehanizma
            </summary>
        </member>
        <member name="F:imbACE.Core.xml.xpathDebugMode.disabled">
            <summary>
            Ne obaveštava o izvršavanju xPath-a
            </summary>
        </member>
        <member name="F:imbACE.Core.xml.xpathDebugMode.onNullResult">
            <summary>
            Obaveštava samo ako je Null Result
            </summary>
        </member>
        <member name="F:imbACE.Core.xml.xpathDebugMode.fullDebug">
            <summary>
            Obaveštava u svakom slučaju
            </summary>
        </member>
    </members>
</doc>
